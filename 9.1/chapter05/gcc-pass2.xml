<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-gcc-pass2" role="wrap">
  <?dbhtml filename="gcc-pass2.html"?>

  <sect1info condition="script">
    <productname>gcc-pass2</productname>
    <productnumber>&gcc-version;</productnumber>
    <address>&gcc-url;</address>
  </sect1info>

  <title>GCC-&gcc-version; - 2단계</title>

  <indexterm zone="ch-tools-gcc-pass2">
    <primary sortas="a-GCC">GCC</primary>
    <secondary>tools, pass 2</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../chapter06/gcc.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&gcc-ch5p2-sbu;</seg>
        <seg>&gcc-ch5p2-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>GCC 설치</title>

    <para>우리의 첫 번째 GCC 빌드에서는 내부 시스템 헤더 몇 개를 설치했다. 그 중 하나인 <filename>limits.h</filename>는, 보통 해당 시스템의 <filename>limits.h</filename> 헤더(이 경우 <filename>/tools/include/limits.h</filename>)를 설치한다. 그러나 GCC의 첫 빌드 때는 <filename>/tools/include/limits.h</filename>가 존재하지 않았으므로, GCC가 설치한 내부 헤더는 일부에 불과한 자체 파일이고 시스템 헤더의 확장 기능을 포함하지 않는다. 
이것은 임시 libc를 빌드하는 데는 적합했지만, 이제 GCC를 빌드하는 데는 전체 내부 헤더가 필요하다. 일반적인 상황에서 GCC 빌드 시스템이 수행하는 것과 동일한 명령을 사용해서 내부 헤더의 전체 버전을 만든다:</para>

<screen><userinput remap="pre">cat gcc/limitx.h gcc/glimits.h gcc/limity.h &gt; \
  `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h</userinput></screen>
<!--
    <para>For x86 machines, the limited number of registers is a bottleneck
    for the system.  Free one up by not using a frame pointer that is not
    needed:</para>

<screen><userinput remap="pre">case `uname -m` in
  i?86) sed -i 's/^T_CFLAGS =$/&amp; -fomit-frame-pointer/' gcc/Makefile.in ;;
esac</userinput></screen>
-->
    <para>다시 한 번, <filename class="directory">/tools</filename>에 설치된 것을 사용하도록 GCC의 기본 동적 링커 위치를 변경하라.</para>

<screen><userinput remap="pre">for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&amp;@g' \
      -e 's@/usr@/tools@g' $file.orig &gt; $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' &gt;&gt; $file
  touch $file.orig
done</userinput></screen>

    <para>x86_64에서 빌드하는 경우, 64비트 라이브러리의 기본 디렉토리 이름을 <quote>lib</quote>로 변경하라:</para>

<screen><userinput remap="pre">case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
  ;;
esac</userinput></screen>

    <para>GCC의 첫 번째 빌드와 마찬가지로 GMP, MPFR 및 MPC 패키지가 필요하다. tarbal의 압축을 풀고 필요한 디렉토리 이름으로 변경하라:</para>

<screen><userinput remap="pre">tar -xf ../mpfr-&mpfr-version;.tar.xz
mv -v mpfr-&mpfr-version; mpfr
tar -xf ../gmp-&gmp-version;.tar.xz
mv -v gmp-&gmp-version; gmp
tar -xf ../mpc-&mpc-version;.tar.gz
mv -v mpc-&mpc-version; mpc</userinput></screen>

    <para>
      이제 Glibc-2.31에서 나온 문제를 해결한다:
    </para>

<screen><userinput remap="pre">sed -e '1161 s|^|//|' \
    -i libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc</userinput></screen>

    <para>다시 별도의 빌드 디렉토리를 생성한다:</para>

<screen><userinput remap="pre">mkdir -v build
cd       build</userinput></screen>

    <para>GCC 빌드를 시작하기 전에, 기본 최적화 플래그를 덮어쓰는 환경 변수들을 반드시 해제하라.</para>

    <para>GCC 컴파일을 준비한다:</para>

<screen><userinput remap="configure">CC=$LFS_TGT-gcc                                    \
CXX=$LFS_TGT-g++                                   \
AR=$LFS_TGT-ar                                     \
RANLIB=$LFS_TGT-ranlib                             \
../configure                                       \
    --prefix=/tools                                \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --enable-languages=c,c++                       \
    --disable-libstdcxx-pch                        \
    --disable-multilib                             \
    --disable-bootstrap                            \
    --disable-libgomp</userinput></screen>

    <variablelist>
      <title>Configure 옵션들의 의미:</title>

      <varlistentry>
        <term><parameter>--enable-languages=c,c++</parameter></term>
        <listitem>
          <para>C와 C++ 컴파일러가 모두 빌드되도록 한다.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-libstdcxx-pch</parameter></term>
        <listitem>
          <para><filename class="libraryfile">libstdc++</filename>를 위해 사전 컴파일된 헤더(PCH)를 빌드하지 않도록 한다. 디스크 공간을 많이 차지하며, 우리에게 쓸모가 없다.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-bootstrap</parameter></term>
        <listitem>
          <para>네이티브 GCC 빌드는 "부트스트랩" 빌드가 기본값이다. 이것은 단순히 GCC를 컴파일하는 것이 아니라 여러번 컴파일한다. 1차 컴파일 결과를 활용해 2차 빌드를 한 뒤, 3차 컴파일을 한다. 두 번째와 세 번째 반복을 거쳐 제스스로 완전히 복제가 가능한 지 비교한다. 이를 통해 정확하게 컴파일됐는지의 여부도 알 수 있다. 그러나 LFS 빌드 과정은 매번 부트스트랩할 필요 없이 견고한 컴파일러를 제공할 것이다.</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>패키지를 컴파일한다:</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>패키지를 설치한다:</para>

<screen><userinput remap="install">make install</userinput></screen>

    <para>마무리 작업으로 심볼릭 링크를 만든다. 많은 프로그램들과 스크립트들은 <command>gcc</command>대신 <command>cc</command>를 실행하는데, 이로써 GNU C 컴파일러가 항상 설치되어있지 않은 모든 종류의 UNIX 시스템에서 사용할 수 있게 범용성을 유지한다. <command>cc</command>를 사용하면 시스템 관리자가 어떤 C 컴파일러를 설치할 지 자유롭게 결정하도록 할 수 있다:</para>

<screen><userinput remap="install">ln -sv gcc /tools/bin/cc</userinput></screen>

  <caution>
    <para>여기서 잠깐 멈추고 새로운 툴체인의 기본 기능(컴파일 및 링크)이 
기대한 대로 잘 작동하는지 확인하는 것이 우선이다. 다음 명령으로 온전성 검사를 수행하라:</para>

<screen><userinput>echo 'int main(){}' &gt; dummy.c
cc dummy.c
readelf -l a.out | grep ': /tools'</userinput></screen>

    <para>모든 것이 제대로 작동하면 오류가 없어야 하며 마지막 명령의 출력은 다음과 같을 것이다:</para>

<screen><computeroutput>[Requesting program interpreter: /tools/lib64/ld-linux-x86-64.so.2]</computeroutput></screen>

    <para>32비트 시스템에서는 동적 링커가 /tools/lib/ld-linux.so.2임을 참고하라.</para>

    <para>만약 출력이 위와 같이 표시되지 않거나 출력이 전혀 없다면, 무언가 잘못된 것이다. 이전 단계로 돌아가 어디서 문제가 생겼는지 파악하고 수정하라. 이 문제는 계속 진행하기 전에 반드시 해결해야 한다. 먼저 <command>cc</command> 대신 <command>gcc</command>를 사용하여 온전성 검사를 다시 실행하라. 만약 잘 된다면, <filename class="symlink">/tools/bin/cc</filename>가 누락된 것이다. 이상 심볼릭 링크를 생성하라. 그런 다음 <envar>PATH</envar>가 올바른지 확인하라. <command>echo $PATH</command>를 실행했을 때 결과 맨 앞에 <filename class="directory">/tools/bin</filename>가 나오면 올바른 것이다. <envar>PATH</envar>가 잘못됐다면 <systemitem class="username">lfs</systemitem> 유저로 로그인하지 않았거나 <xref linkend="ch-preps-settingenviron" role="."/>에서 문제가 발생했다는 의미이다.</para>

    <para>모두 잘 됐다면, 테스트 파일을 정리하라:</para>

<screen><userinput>rm -v dummy.c a.out</userinput></screen>

  </caution>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>이 패키지에 대한 자세한 정보는 <xref linkend="contents-gcc" role="."/>에서 찾을 수 있다.</para>

  </sect2>

</sect1>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-glibc" role="wrap">
  <?dbhtml filename="glibc.html"?>

  <sect1info condition="script">
    <productname>glibc</productname>
    <productnumber>&glibc-version;</productnumber>
    <address>&glibc-url;</address>
  </sect1info>

  <title>Glibc-&glibc-version;</title>

  <indexterm zone="ch-tools-glibc">
    <primary sortas="a-Glibc">Glibc</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../chapter06/glibc.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&glibc-ch5-sbu;</seg>
        <seg>&glibc-ch5-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>Glibc 설치</title>

    <para>Glibc 문서에서는 전용 빌드 디렉토리에 Glibc를 빌드할 것을 권장한다:</para>

<screen><userinput remap="pre">mkdir -v build
cd       build</userinput></screen>

    <para>다음으로 Glibc 컴파일을 준비한다:</para>

<screen><userinput remap="configure">../configure                             \
      --prefix=/tools                    \
      --host=$LFS_TGT                    \
      --build=$(../scripts/config.guess) \
      --enable-kernel=&min-kernel;                \
      --with-headers=/tools/include</userinput></screen>
<!--
      libc_cv_forced_unwind=yes          \
      libc_cv_c_cleanup=yes</userinput></screen> -->

    <variablelist>
      <title>Configure 옵션들의 의미:</title>

      <varlistentry>
        <term><parameter>--host=$LFS_TGT, --build=$(../scripts/config.guess)</parameter></term>
        <listitem>
          <para><filename class="directory">/tools</filename>의 크로스 링커와 크로스 컴파일러를 사용해서 Glibc의 빌드 시스템이 스스로를 크로스 컴파일하게 한다.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-kernel=&min-kernel;</parameter></term>
        <listitem>
          <para>Glibc가 &min-kernel; 이상 리눅스 커널을 지원하는 라이브러리를 컴파일하도록 한다. 이전 커널에 대한 라이브러리는 사용할 수 없다.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-headers=/tools/include</parameter></term>
        <listitem>
          <para>앞서 tools 디렉토리에 설치된 헤더들을 가지고 컴파일하도록 한다. 커널이 어떤 기능들을 갖고 있는지 정확히 알고 그에 따른 최적화를 할 수 있다.</para>
        </listitem>
      </varlistentry>
<!--
      <varlistentry>
        <term><parameter>libc_cv_forced_unwind=yes</parameter></term>
        <listitem>
          <para>The linker installed during
          <xref linkend="ch-tools-binutils-pass1"/> was cross-compiled and as
          such cannot be used until Glibc has been installed.  This means that
          the configure test for force-unwind support will fail, as it relies on
          a working linker.  The libc_cv_forced_unwind=yes variable is passed in
          order to inform <command>configure</command> that force-unwind
          support is available without it having to run the test.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>libc_cv_c_cleanup=yes</parameter></term>
        <listitem>
          <para>Similarly, we pass libc_cv_c_cleanup=yes through to the
          <command>configure</command> script so that the test is skipped and C
          cleanup handling support is configured.</para>
        </listitem>
      </varlistentry>
-->
<!--  <varlistentry>
        <term><parameter>libc_cv_ctors_header=yes</parameter></term>
        <listitem>
          <para>Similarly, we pass libc_cv_ctors_header=yes through to the
          <command>configure</command> script so that the test is skipped and
          gcc constructor support is configured.</para>
        </listitem>
      </varlistentry>-->

    </variablelist>

    <para>이 단계에서 다음과 같은 경고가 나타날 수 있다:</para>

    <blockquote>
<screen><computeroutput>configure: WARNING:
*** These auxiliary programs are missing or
*** incompatible versions: msgfmt
*** some features will be disabled.
*** Check the INSTALL file for required versions.</computeroutput></screen>
    </blockquote>

    <para>누락됐거나 호환되지 않는다는 <command>msgfmt</command> 프로그램은 보통 문제가 되지 않는다. 이 <command>msgfmt</command> 프로그램은 호스트 배포판이 제공하는 Gettext 패키지의 일부다. </para>

    <note><para>"병렬 make"로 빌드할 때 실패하는 경우가 있다는 보고가 있었다. 이럴 경우 "-j1" 옵션을 사용해서 make 명령을 다시 실행하라.</para></note>

    <para>패키지를 컴파일한다:</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>패키지를 설치한다:</para>

<screen><userinput remap="install">make install</userinput></screen>

  <caution>
    <para>여기서 잠깐 멈추고 새로운 툴체인의 기본 기능(컴파일 및 링크)이 기대한 대로 잘 작동하는지 확인하는 것이 우선이다. 다음 명령으로 온전성 검사를 수행하라:</para>

<screen><userinput>echo 'int main(){}' &gt; dummy.c
$LFS_TGT-gcc dummy.c
readelf -l a.out | grep ': /tools'</userinput></screen>

    <para>모든 것이 제대로 작동한다면 오류가 없어야 하며 마지막 명령의 출력은 다음과 같을 것이다:</para>

<screen><computeroutput>[Requesting program interpreter: /tools/lib64/ld-linux-x86-64.so.2]</computeroutput></screen>

    <para>32비트 시스템에서는 인터프리터 이름이 <filename>/tools/lib/ld-linux.so.2</filename>임을 참고하라.</para>

    <para>만약 출력이 위와 같이 표시되지 않거나 출력이 전혀 없다면, 무언가 잘못된 것이다. 이전 단계로 돌아가 어디서 문제가 생겼는지 파악하고 수정하라. 이 문제는 계속 진행하기 전에 반드시 해결해야 한다.</para>

    <para>모두 잘 됐다면, 테스트 파일을 정리하라:</para>

<screen><userinput>rm -v dummy.c a.out</userinput></screen>

  </caution>

  <note><para>다음 절에서 Binutils를 빌드하면 툴체인이 올바르게 빌드되었는지 다시금 확인하는 기회가 될 것이다. Binutils 빌드에 실패하면, 이전 Binutils, GCC, 또는 Glibc 중 어딘가 문제가 생겼음을 보여주는 것이다.</para></note>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>이 패키지에 대한 자세한 정보는 <xref linkend="contents-glibc" role="."/>에서 찾을 수 있다.</para>

  </sect2>

</sect1>

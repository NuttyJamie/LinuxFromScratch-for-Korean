<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-binutils-pass1" role="wrap">
  <?dbhtml filename="binutils-pass1.html"?>

  <sect1info condition="script">
    <productname>binutils-1단계</productname>
    <productnumber>&binutils-version;</productnumber>
    <address>&binutils-url;</address>
  </sect1info>

  <title>Binutils-&binutils-version; - 1단계</title>

  <indexterm zone="ch-tools-binutils-pass1">
    <primary sortas="a-Binutils">Binutils</primary>
    <secondary>tools, pass 1</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../chapter06/binutils.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&binutils-ch5p1-sbu;</seg>
        <seg>&binutils-ch5p1-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>Cross Binutils 설치</title>

    <note><para>이전 절로 돌아가 주의 사항들을 되짚어보라. 중요하다고 표시된 항목들을 이해하면 앞으로의 많은 문제들을 줄일 수 있다. </para></note>

    <para>Binutils를 가장 먼저 컴파일하는 것이 중요하다. Glibc와 GCC는 각자 어떤 기능을 활성화할지 정하기 위해 가용한 링커와 어셈블러를 통해 다양한 테스트를 하기 때문이다.</para>

    <para>Binutils 문서에서는 Binutils를 전용 빌드 디렉토리에서 빌드할 것을 권장한다:</para>

<screen><userinput remap="pre">mkdir -v build
cd       build</userinput></screen>

    <note>
      <para>이 책에서 앞으로 나올 SBU 값을 의미있게 참고하려면, 설정에서 첫 번째 설치까지 이 패키지를 빌드하는 데 걸린 시간을 측정하라. 이 측정을 쉽게 하려면 명령어를 다음과 같이 <command>time</command> 명령어로 감싸라: <userinput>time { ./configure ... &amp;&amp; ...  &amp;&amp; make install; }</userinput>.</para>
    </note>

    <note><para>5장의 대략적인 빌드 SBU 값과 필요 디스크 공간은 테스트 스위트 데이터를 포함하지 않는다.</para></note>

    <para>이제 Binutils 컴파일을 준비한다:</para>

<screen><userinput remap="configure">../configure --prefix=/tools            \
             --with-sysroot=$LFS        \
             --with-lib-path=/tools/lib \
             --target=$LFS_TGT          \
             --disable-nls              \
             --disable-werror</userinput></screen>

    <variablelist>
      <title>Configure 옵션들의 의미:</title>

      <varlistentry>
        <term><parameter>--prefix=/tools</parameter></term>
        <listitem>
          <para>Configure 스크립트가 <filename class="directory">/tools</filename> 디렉토리에 Binutils 프로그램들을 설치하도록 준비한다.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-sysroot=$LFS</parameter></term>
        <listitem>
          <para>크로스 컴파일의 경우 빌드 시스템이 필요에 따라 $LFS에서 목표 시스템 라이브러리를 찾도록 지시한다.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-lib-path=/tools/lib</parameter></term>
        <listitem>
          <para>링커가 사용할 라이브러리 경로를 지정한다.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><envar>--target=$LFS_TGT</envar></term>
        <listitem>
          <para><envar>LFS_TGT</envar> 변수의 시스템 설명이 <command>config.guess</command> 스크립트에서 반환되는 값과 약간 다르기 때문에, <command>configure</command> 스크립트를 통해 크로스 링커 빌드를 위한 Binutils의 빌드 시스템을 조정한다.  </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-nls</parameter></term>
        <listitem>
          <para>임시 도구에는 i18n이 필요하지 않으므로 다국어화를 비활성화한다.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-werror</parameter></term>
        <listitem>
          <para>호스트 컴파일러로부터 나온 경고로 빌드가 멈추는 것을 방지한다.</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>계속해서 패키지 컴파일을 진행한다:</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>이제 컴파일이 끝났다. 원래대로라면 이제 테스트 스위트를 실행했겠지만, 아직은 테스트 스위트 프레임워크(Tcl, Expect 및 DejaGNU가 아직 준비되지 않았다. 이 첫 번째 단계의 프로그램은 곧 두 번째 단계의 프로그램으로 대체될 것이기 때문에 지금 테스트를 실행해봤자 큰 이점은 없다.</para>

    <para>x86_64에서 빌드 중이라면, 심볼릭 링크를 만들어서 툴체인의 안정성을 보장하라:</para>

<screen><userinput remap="install">case $(uname -m) in
  x86_64) mkdir -v /tools/lib &amp;&amp; ln -sv lib /tools/lib64 ;;
esac</userinput></screen>

    <para>패키지를 설치한다:</para>

<screen><userinput remap="install">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>이 패키지에 대한 자세한 정보는 <xref linkend="contents-binutils" role="."/>에서 찾을 수 있다.</para>

  </sect2>

</sect1>

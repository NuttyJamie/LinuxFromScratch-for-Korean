<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-createfiles">
  <?dbhtml filename="createfiles.html"?>

  <title>필수 파일 및 Symlink 생성</title>

  <indexterm zone="ch-system-createfiles">
    <primary sortas="e-/etc/passwd">/etc/passwd</primary>
  </indexterm>

  <indexterm zone="ch-system-createfiles">
    <primary sortas="e-/etc/group">/etc/group</primary>
  </indexterm>

  <indexterm zone="ch-system-createfiles">
    <primary sortas="e-/var/run/utmp">/var/run/utmp</primary>
  </indexterm>

  <indexterm zone="ch-system-createfiles">
    <primary sortas="e-/var/log/btmp">/var/log/btmp</primary>
  </indexterm>

  <indexterm zone="ch-system-createfiles">
    <primary sortas="e-/var/log/lastlog">/var/log/lastlog</primary>
  </indexterm>

  <indexterm zone="ch-system-createfiles">
    <primary sortas="e-/var/log/wtmp">/var/log/wtmp</primary>
  </indexterm>

  <para>일부 프로그램은 아직 존재하지 않는 프로그램에 대한 고정 경로를 사용한다. 이러한 프로그램들을 만족시키기 위해, 이 장의 절차를 거치면서 소프트웨어를 설치한 후 실제 파일로 대체될 여러 심볼릭 링크를 만든다:</para>

<screen><userinput>ln -sv /tools/bin/{bash,cat,chmod,dd,echo,ln,mkdir,pwd,rm,stty,touch} /bin
ln -sv /tools/bin/{env,install,perl,printf}         /usr/bin
ln -sv /tools/lib/libgcc_s.so{,.1}                  /usr/lib
ln -sv /tools/lib/libstdc++.{a,so{,.6}}             /usr/lib

ln -sv bash /bin/sh</userinput></screen>

<!--for lib in blkid lzma mount uuid
do
    ln -sv /tools/lib/lib$lib.so* /usr/lib
done-->
<!--ln -svf /tools/include/blkid    /usr/include
ln -svf /tools/include/libmount /usr/include
ln -svf /tools/include/uuid     /usr/include-->
<!--for pc in blkid mount uuid
do
    sed 's@tools@usr@g' /tools/lib/pkgconfig/${pc}.pc \
        > /usr/lib/pkgconfig/${pc}.pc
done-->
  <variablelist>
    <title>각 링크의 용도:</title>

    <varlistentry>
      <term><parameter><filename>/bin/bash</filename></parameter></term>
      <listitem>
        <para>많은 <command>bash</command> 스크립트가 
        <filename>/bin/bash</filename>를 지정한다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/bin/cat</filename></parameter></term>
      <listitem>
        <para>이 경로명은 Glibc의 configure 스크립트에 하드 코딩되어 있다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/bin/dd</filename></parameter></term>
      <listitem>
        <para><filename>dd</filename>의 경로는 <filename>/usr/bin/libtool</filename> 유틸리티에 하드 코딩될 것이다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/bin/echo</filename></parameter></term>
      <listitem>
        <para><filename>/bin/echo</filename>를 참조하는 Glibc의 테스트 스위트 내 테스트 중 하나를 만족시키기 위함이다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/usr/bin/env</filename></parameter></term>
      <listitem>
        <para>이 경로명은 일부 패키지 빌드 절차에 하드 코딩되어 있다.
        <!-- systemd  This may not be needed if we move sysd to the end--></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/usr/bin/install</filename></parameter></term>
      <listitem>
        <para><filename>install</filename>의 경로가 <filename>/usr/lib/bash/Makefile.inc</filename> 파일로 하드 코딩될 것이다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/bin/ln</filename></parameter></term>
      <listitem>
        <para><filename>ln</filename>의 경로는 <filename>/usr/lib/perl5/&perl-version;/&lt;target-triplet&gt;/Config_heavy.pl</filename> 파일에 하드 코딩된다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/bin/pwd</filename></parameter></term>
      <listitem>
        <para>일부 <command>configure</command> 스크립트, 특히 Glibc의 것에는 이 경로명이 하드 코딩되어 있다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/bin/rm</filename></parameter></term>
      <listitem>
        <para><filename>rm</filename>의 경로는 <filename>/usr/lib/perl5/&perl-version;/&lt;target-triplet&gt;/Config_heavy.pl</filename> 파일에 하드 코딩된다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/bin/stty</filename></parameter></term>
      <listitem>
        <para>이 경로명은 Expect로 하드 코딩되어 있어서, Binutils와 GCC 테스트 스위트 통과에 필요하다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/usr/bin/perl</filename></parameter></term>
      <listitem>
        <para>많은 Perl 스크립트가 <command>perl</command> 프로그램에 대해 이 경로를 하드 코딩한다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/usr/lib/libgcc_s.so{,.1}</filename></parameter></term>
      <listitem>
        <para>Glibc의 pthreads 라이브러리가 작동하기 위해 필요하다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/usr/lib/libstdc++{,.6}</filename></parameter></term>
      <listitem>
        <para>GMP의 C++ 지원과 더불어 Glibc의 테스트 스위트에서 몇 가지 테스트를 하기 위해 필요하다.</para>
      </listitem>
    </varlistentry>
<!--
    <varlistentry>
      <term><parameter><filename>/usr/lib/libstdc++.la</filename></parameter></term>
      <listitem>
        <para>This prevents a <filename class="directory">/tools</filename>
        reference that would otherwise be in
        <filename>/usr/lib/libstdc++.la</filename> after GCC is installed.</para>
      </listitem>
    </varlistentry>
-->
    <!--<varlistentry revision="systemd">-->
<!--    <varlistentry>
      <term><parameter><filename>/usr/lib/lib{blkid,lzma,mount,uuid}.{a,la,so*}</filename></parameter></term>
      <listitem>
        <para>These links prevent utilities from acquiring an
        unnecessary reference to the
        <filename class="directory">/tools</filename> directory.</para>
      </listitem>
    </varlistentry>-->

    <varlistentry>
      <term><parameter><filename>/bin/sh</filename></parameter></term>
      <listitem>
        <para>많은 셸 스크립트가 <filename>/bin/sh</filename>를 하드 코딩한다.</para>
      </listitem>
    </varlistentry>

  </variablelist>

  <para>역사적으로 리눅스는 마운팅된 파일 시스템 목록을 <filename>/etc/mtab</filename> 파일로 관리한다. 최신 커널은 이 목록을 내부적으로 관리하며 <filename class="directory">/proc</filename> 파일 시스템을 통해 사용자에게 공개한다. <filename>/etc/mtab</filename>이 존재할 것으로 예상하는 유틸리티들을 만족시키기 위해, 다음 심볼릭 링크를 생성하라:</para>

<screen><userinput>ln -sv /proc/self/mounts /etc/mtab</userinput></screen>

  <para><systemitem class="username">root</systemitem> 유저가 로그인할 수 있게 하고 <quote>root</quote> 이름이 인식되게 하려면 <filename>/etc/passwd</filename>와 <filename>/etc/group</filename> 파일에 관련 항목이 있어야 한다.</para>

  <para>다음 명령을 실행하여 <filename>/etc/passwd</filename> 파일을 생성하라:</para>

<screen revision="sysv"><userinput>cat &gt; /etc/passwd &lt;&lt; "EOF"
<literal>root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/bin/false
daemon:x:6:6:Daemon User:/dev/null:/bin/false
messagebus:x:18:18:D-Bus Message Daemon User:/var/run/dbus:/bin/false
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false</literal>
EOF</userinput></screen>

<screen revision="systemd"><userinput>cat &gt; /etc/passwd &lt;&lt; "EOF"
<literal>root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/bin/false
daemon:x:6:6:Daemon User:/dev/null:/bin/false
messagebus:x:18:18:D-Bus Message Daemon User:/var/run/dbus:/bin/false
systemd-bus-proxy:x:72:72:systemd Bus Proxy:/:/bin/false
systemd-journal-gateway:x:73:73:systemd Journal Gateway:/:/bin/false
systemd-journal-remote:x:74:74:systemd Journal Remote:/:/bin/false
systemd-journal-upload:x:75:75:systemd Journal Upload:/:/bin/false
systemd-network:x:76:76:systemd Network Management:/:/bin/false
systemd-resolve:x:77:77:systemd Resolver:/:/bin/false
systemd-timesync:x:78:78:systemd Time Synchronization:/:/bin/false
systemd-coredump:x:79:79:systemd Core Dumper:/:/bin/false
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false</literal>
EOF</userinput></screen>

  <para><systemitem class="username">root</systemitem>에 대한 실제 암호(여기서 사용되는 <quote>x</quote>는 구문표시자일 뿐이다)는 나중에 설정된다.</para>

  <para>다음 명령을 실행하여 <filename>/etc/group</filename> 파일을 생성하라:</para>

<screen revision="sysv"><userinput>cat &gt; /etc/group &lt;&lt; "EOF"
<literal>root:x:0:
bin:x:1:daemon
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
adm:x:16:
messagebus:x:18:
input:x:24:
mail:x:34:
kvm:x:61:
wheel:x:97:
nogroup:x:99:
users:x:999:</literal>
EOF</userinput></screen>

<screen revision="systemd"><userinput>cat &gt; /etc/group &lt;&lt; "EOF"
<literal>root:x:0:
bin:x:1:daemon
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
adm:x:16:
messagebus:x:18:
systemd-journal:x:23:
input:x:24:
mail:x:34:
kvm:x:61:
systemd-bus-proxy:x:72:
systemd-journal-gateway:x:73:
systemd-journal-remote:x:74:
systemd-journal-upload:x:75:
systemd-network:x:76:
systemd-resolve:x:77:
systemd-timesync:x:78:
systemd-coredump:x:79:
wheel:x:97:
nogroup:x:99:
users:x:999:</literal>
EOF</userinput></screen>

  <para>생성된 그룹들은 어떤 표준에도 속하지 않는다&mdash;부분적으로는 이 장의 Udev 구성의 요구사항에 의해, 부분적으로는 기존 리눅스 배포판에 사용된 공통 규약에 의해 만들어진 그룹이다. 그리고 일부 테스트 스위트들은 특정 유저나 그룹을 필요로 한다. 리눅스 기본 규격(Linux Standard Base, LSB, <ulink url="http://www.linuxbase.org"/>에서 참고)은 그룹 ID (GID) 0인 <systemitem class="groupname">root</systemitem> 그룹 외에, GID가 1인 <systemitem class="groupname">bin</systemitem> 그룹도 존재하게 둘 것을 권장한다. 다른 모든 그룹명과 GID는 잘 작성된 프로그램이라면 GID 번호에 의존하지 않고 그룹명을 사용하기 때문에 시스템 관리자가 자유롭게 정할 수 있다.</para>

  <para><quote>I have no name!</quote> 프롬프트를 지우려면 새 셸을 시작하라. <xref linkend="chapter-temporary-tools"/>에서 완전한 Glibc가 설치되었고 <filename>/etc/passwd</filename>와 <filename>/etc/group</filename> 파일이 생성되었으므로 이제 유저명과 그룹명을 잘 불러올 것이다:</para>

<screen role="nodump"><userinput>exec /tools/bin/bash --login +h</userinput></screen>

  <para><parameter>+h</parameter> 지시문의 사용에 주목하라. 이것은 <command>bash</command>의 내부 경로 해싱을 비활성화 한다. 이 명령이 없으면 <command>bash</command>는 바이너리를 실행한 경로를 기억할 것이다. 새로 컴파일된 바이너리 파일이 설치되는 즉시 사용될 수 있도록 이 장에서는 <parameter>+h</parameter> 지시문을 사용할 것이다.</para>

  <para><command>login</command>, <command>agetty</command> 및 
  <command>init</command> 프로그램(및 기타)은 누가, 언제 시스템에 로그인했는지 같은 정보를 기록하기 위해 여러 로그 파일을 사용한다. 그러나 이런 프로그램들은 로그 파일이 이미 존재하지 않으면 로그를 남기지 않는다. 로그 파일을 초기화하고 적절한 권한을 부여하라:</para>

<screen><userinput>touch /var/log/{btmp,lastlog,faillog,wtmp}
chgrp -v utmp /var/log/lastlog
chmod -v 664  /var/log/lastlog
chmod -v 600  /var/log/btmp</userinput></screen>

  <para><filename>/var/log/wtmp</filename> 파일은 모든 로그인과 로그아웃을 기록한다. <filename>/var/log/lastlog</filename> 파일은 각 유저가 마지막으로 로그인한 시간을 기록한다. <filename>/var/log/faillog</filename> 파일은 유저의 로그인 실패 정보를 기록한다. <filename>/var/log/btmp</filename> 파일은 잘못된 로그인 시도를 기록한다.</para>

  <note><para><filename>/run/utmp</filename> 파일은 현재 로그인한 유저를 기록한다. 이 파일은 부팅 스크립트에서 동적으로 생성된다.</para></note>

</sect1>

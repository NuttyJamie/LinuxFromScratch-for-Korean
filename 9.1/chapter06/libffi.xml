<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-libffi" role="wrap">
  <?dbhtml filename="libffi.html"?>

  <sect1info condition="script">
    <productname>libffi</productname>
    <productnumber>&libffi-version;</productnumber>
    <address>&libffi-url;</address>
  </sect1info>

  <title>Libffi-&libffi-version;</title>

  <indexterm zone="ch-system-libffi">
    <primary sortas="a-libffi">libffi</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Libffi 라이브러리는 다양한 호출 규약에 대한 이식 가능한 고급 프로그래밍 인터페이스를 제공한다. 프로그래머가 런타임 중에 호출 인터페이스 설명에 적힌 어떤 함수든 호출할 수 있다. </para>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&libffi-ch6-sbu;</seg>
        <seg>&libffi-ch6-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>Libffi 설치</title>

    <note>
      <para>GMP와 유사하게, libffi는 사용 중인 프로세서에 최적화 되어 빌드된다. 다른 시스템 용으로 빌드하는 경우 CFLAGS와 CXXFLAGS를 export해서 아키텍쳐를 위한 범용 빌드로 설정하라. 그러지 않으면 libffi에 연결된 모든 응용 프로그램에서 잘못된 작업 오류를 일으킨다.</para>
    </note>
<!--
    <para>Modify the Makefile to install headers into the standard
    <filename class="directory">/usr/include</filename> directory instead of
    <filename class="directory">/usr/lib/libffi-&libffi-version;/include</filename>.</para>

<screen><userinput remap="pre">sed -e '/^includesdir/ s/$(libdir).*$/$(includedir)/' \
    -i include/Makefile.in

sed -e '/^includedir/ s/=.*$/=@includedir@/' \
    -e 's/^Cflags: -I${includedir}/Cflags:/' \
    -i libffi.pc.in</userinput></screen>
-->
    <para>libffi 컴파일을 준비한다:</para>

<screen><userinput remap="configure">./configure --prefix=/usr --disable-static --with-gcc-arch=native</userinput></screen>

    <variablelist>
      <title>Configure 옵션의 의미:</title>

      <varlistentry>
        <term><parameter>--with-gcc-arch=native</parameter></term>
        <listitem>
          <para>현재 시스템에 대해 gcc 최적화를 한다. 이것을 지정하지 않으면 대상 시스템을 추측해서 빌드되고 따라서 생성된 코드가 시스템에 대해 알맞지 않을 수가 있다. 생성된 코드를 네이티브 시스템에서 성능이 낮은 시스템으로 복사하려면, 성능이 낮은 시스템을 매개 변수로 사용하라. 대체 시스템 유형에 대한 자세한 내용은 <ulink url='https://gcc.gnu.org/onlinedocs/gcc-&gcc-version;/gcc/x86-Options.html'>gcc 매뉴얼의 x86 옵션들</ulink>을 참고하라.</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>패키지를 컴파일한다:</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>결과를 테스트하려면 실행하라:</para>

<screen><userinput remap="test">make check</userinput></screen>

    <para>test-callback.c에 관련된 6개의 테스트가 실패한다고 알려져 있다.</para>

    <para>패키지를 설치한다:</para>

<screen><userinput remap="install">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-libffi" role="content">
    <title>Libffi의 내용</title>

    <segmentedlist>
      <segtitle>설치된 라이브러리</segtitle>

      <seglistitem>
        <seg>libffi.so</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">요약</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="libffi">
        <term><filename class="libraryfile">libffi</filename></term>
        <listitem>
          <para>libffi API 함수들을 포함하고 있다.</para>
          <indexterm zone="ch-system-libffi">
            <primary sortas="c-libffi">libffi</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>

  </sect2>

</sect1>


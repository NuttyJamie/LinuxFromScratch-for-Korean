<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-gcc" role="wrap">
  <?dbhtml filename="gcc.html"?>

  <sect1info condition="script">
    <productname>gcc</productname>
    <productnumber>&gcc-version;</productnumber>
    <address>&gcc-url;</address>
  </sect1info>

  <title>GCC-&gcc-version;</title>

  <indexterm zone="ch-system-gcc">
    <primary sortas="a-GCC">GCC</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>GCC 패키지는 C, C++ 컴파일러가 들어있는 GNU 컴파일러 컬렉션을 포함하고 있다. </para>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&gcc-ch6-sbu;</seg>
        <seg>&gcc-ch6-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>GCC 설치</title>

    <para>x86_64에서 빌드하고 있다면, 64비트 라이브러리의 기본 디렉토리 이름을 <quote>lib</quote>로 변경하라:</para>

<screen><userinput remap="pre">case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
  ;;
esac</userinput></screen>

   <para>
      Gcc 2단계에서처럼, Glibc-2.31에서 언급된 문제를 수정한다:
    </para>

<screen><userinput remap="pre">sed -e '1161 s|^|//|' \
    -i libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc</userinput></screen>

    <para>GCC 문서는 전용 빌드 디렉토리에 GCC를 구축할 것을 권장한다:</para>

<screen><userinput remap="pre">mkdir -v build
cd       build</userinput></screen>

    <para>GCC 컴파일을 준비한다:</para>

<screen><userinput remap="configure">SED=sed                               \
../configure --prefix=/usr            \
             --enable-languages=c,c++ \
             --disable-multilib       \
             --disable-bootstrap      \
             --with-system-zlib</userinput></screen>

    <para>다른 언어의 경우는 아직 사용할 수 없는 몇 가지 전제 조건이 필요하다는 점을 참고하라. GCC에서 지원되는 모든 언어를 빌드하는 방법은 <ulink url="&blfs-book;general/gcc.html">BLFS 책</ulink>을 참고하라.</para>

    <variablelist>
      <title>Configure 매개 변수들의 의미:</title>

      <varlistentry>
        <term><envar>SED=sed</envar></term>
        <listitem>
          <para>/tools/bin/sed로 경로가 하드코딩되는 것을 막는다.</para>
        </listitem>
      </varlistentry>
      <!-- 
      <varlistentry>
        <term><parameter>- -disable-libmpx</parameter></term>
        <listitem>
          <para>This switch tells GCC to not build mpx (Memory Protection
          Extensions) that can cause problems on some processors. It has
          been removed from the next version of gcc.</para>
        </listitem>
      </varlistentry>
      -->
      <varlistentry>
        <term><parameter>--with-system-zlib</parameter></term>
        <listitem>
          <para>GCC가 자체 내부의 Zlib 라이브러리 사본이 아닌 시스템 설치 복사본에 링크하도록 지시한다.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>패키지를 컴파일한다:</para>

<screen><userinput remap="make">make</userinput></screen>

    <important>
      <para>이 절의 GCC 테스트 스위트는 매우 중요하다. 어떤 상황에서도 건너뛰지 않도록 하라.</para>
    </important>

   <para>GCC 테스트 스위트 중의 한 테스트 세트는 스택을 많이 차지하는 것으로 알려져 있으므로 테스트를 실행하기 전에 스택 크기를 늘린다:</para>

<screen><userinput remap="test">ulimit -s 32768</userinput></screen>

    <para>권한 없는 유저로 결과를 테스트하되 오류 발생 시 중단하지 않도록 하라:</para>

<screen><userinput remap="test">chown -Rv nobody . 
su nobody -s /bin/bash -c "PATH=$PATH make -k check"</userinput></screen>

    <para>테스트 스위트 결과에 대한 요약을 확인하려면 다음을 실행하라:</para>

<screen><userinput remap="test">../contrib/test_summary</userinput></screen>

    <para>요약만을 보려면, 위 결과를 <userinput>grep -A7 Summ</userinput>로 파이핑하라.</para>

    <para>결과는 <ulink url="&test-results;"/>와 <ulink url="https://gcc.gnu.org/ml/gcc-testresults/"/>에 있는 결과와 비교할 수 있다.</para>

    <para>get_time과 관련된 6개의 테스트가 실패한 것으로 알려져 있다. 이것들은 명백히 en_HK 로케일과 관련이 있다.</para>

    <para>experimental/net에서 lookup.cc와 reverse.cc라는 두 테스트는 /etc/hosts and iana-etc가 필요해서 LFS chroot 환경에서 실패하는 것으로 알려져 있다.</para>

    <para>pr57193.c와 pr90178.c라는 두 가지 테스트가 실패하는 것으로 알려져 있다. </para>

    <para>예기치 못한 실패가 더 있을 수도 있다. GCC 개발자들은 보통 이런 문제들을 알고 있지만 아직 해결하지 못했다. 위의 URL의 테스트 결과와 크게 다르지 않는 한, 계속 진행해도 무방하다.</para>

    <!--note><para>
      On some combinations of kernel configuration and AMD processors
      there may be more than 1100 failures in the gcc.target/i386/mpx
      tests (which are designed to test the MPX option on recent
      Intel processors). These can safely be ignored on AMD
      processors. These tests will also fail on Intel processors if MPX support
      is not enabled in the kernel even though it is present on the CPU.
    </para></note-->

    <para>패키지를 설치하고 필요하지않은 디렉토리를 삭제한다:</para>

<screen><userinput remap="install">make install
rm -rf /usr/lib/gcc/$(gcc -dumpmachine)/&gcc-version;/include-fixed/bits/</userinput></screen>

    <para>GCC 빌드 디렉토리는 현재 <systemitem class="username">아무도</systemitem> 소유하지 않으며 설치된 헤더 디렉토리(와 그 내용)의 소유권은 불명확해질 것이다. 소유권을 <systemitem class="username">root</systemitem> 유저 및 그룹으로 변경하라:</para>

<screen><userinput remap="install">chown -v -R root:root \
    /usr/lib/gcc/*linux-gnu/&gcc-version;/include{,-fixed}</userinput></screen>

    <para>"역사적인" 이유로 <ulink url="https://refspecs.linuxfoundation.org/FHS_3.0/fhs/ch03s09.html">FHS</ulink>에서 요구하는 심볼릭 링크를 생성한다.</para>

<screen><userinput remap="install">ln -sv ../usr/bin/cpp /lib</userinput></screen>

		<para>많은 패키지들은 <command>cc</command>라는 이름을 사용하여 C 컴파일러를 호출한다. 이러한 패키지들에 부합하게 만드려면 심볼릭 링크를 생성하라:</para>

<screen><userinput remap="install">ln -sv gcc /usr/bin/cc</userinput></screen>

    <para>링크 시간 최적화(Link Time Optimization, LTO)를 사용하여 프로그램을 빌드할 수 있도록 호환성 심볼릭 링크를 추가하라:</para> 

<screen><userinput remap="install">install -v -dm755 /usr/lib/bfd-plugins
ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/&gcc-version;/liblto_plugin.so \
        /usr/lib/bfd-plugins/</userinput></screen>

    <para>이제 우리의 최종 툴체인(tollchain)이 자리를 잡았으니 컴파일 및 링크가 예상대로 잘 될 수 있도록 다시 한 번 확인하는 것이 중요하다. 따라서 앞 장에서 했던 것과 같은 분별력 검사를 수행한다:</para>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='a'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='b'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='c'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='d'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='e'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='f'])"/>

<screen><computeroutput>/usr/lib/gcc/x86_64-pc-linux-gnu/&gcc-version;/../../../../lib/crt1.o succeeded
/usr/lib/gcc/x86_64-pc-linux-gnu/&gcc-version;/../../../../lib/crti.o succeeded
/usr/lib/gcc/x86_64-pc-linux-gnu/&gcc-version;/../../../../lib/crtn.o succeeded</computeroutput></screen>

  <para>당신의 시스템 아키텍쳐에 따라 위의 내용은 약간 다를 수 있는데, 대개 <filename class="directory">/usr/lib/gcc</filename> 다음에 나오는 디렉토리 이름이 차이난다. 여기서 중요하게 봐야 할 것은 <command>gcc</command>가 <filename class="directory">/usr/lib</filename> 디렉토리에서 <filename>crt*.o</filename> 파일 3개를 모두 찾아냈다는 점이다.</para>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='g'])"/>

<screen><userinput>grep -B4 '^ /usr/include' dummy.log</userinput></screen>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='h'])"/>

<screen><computeroutput>#include &lt;...&gt; search starts here:
 /usr/lib/gcc/x86_64-pc-linux-gnu/&gcc-version;/include
 /usr/local/include
 /usr/lib/gcc/x86_64-pc-linux-gnu/&gcc-version;/include-fixed
 /usr/include</computeroutput></screen>

   <para>다시 말하지만, 당신의 대상 트리플렛 뒤의 디렉토리 이름은 아키텍쳐에 따라 위와 다를 수 있다.</para>

<!--  This appears to be obsolete

    <note><para>As of version 4.3.0, GCC now unconditionally installs the
    <filename>limits.h</filename> file into the private
    <filename class="directory">include-fixed</filename> directory, and that
    directory is required to be in place.</para></note>
-->

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='i'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='j'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='k'])"/>

<screen><computeroutput>SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64")
SEARCH_DIR("/usr/local/lib64")
SEARCH_DIR("/lib64")
SEARCH_DIR("/usr/lib64")
SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib")
SEARCH_DIR("/usr/local/lib")
SEARCH_DIR("/lib")
SEARCH_DIR("/usr/lib");</computeroutput></screen>

   <para>32비트 시스템에서는 몇 개의 다른 디렉토리를 볼 수 있다. 예를 들어, i686 시스템에서는 출력이 다음과 같다:</para>

<screen><computeroutput>SEARCH_DIR("/usr/i686-pc-linux-gnu/lib32")
SEARCH_DIR("/usr/local/lib32")
SEARCH_DIR("/lib32")
SEARCH_DIR("/usr/lib32")
SEARCH_DIR("/usr/i686-pc-linux-gnu/lib")
SEARCH_DIR("/usr/local/lib")
SEARCH_DIR("/lib")
SEARCH_DIR("/usr/lib");</computeroutput></screen>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='l'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='m'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='n'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='o'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='p'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='q'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='r'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='s'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='t'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='u'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='v'])"/>

    <para>마지막으로, 위치가 잘못된 파일을 이동하라:</para>

<screen><userinput remap="install">mkdir -pv /usr/share/gdb/auto-load/usr/lib
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib</userinput></screen>

  </sect2>

  <sect2 id="contents-gcc" role="content">
    <title>GCC의 내용</title>

    <segmentedlist>
      <segtitle>설치된 프로그램들</segtitle>
      <segtitle>설치된 라이브러리들</segtitle>
      <segtitle>설치된 디렉토리들</segtitle>

      <seglistitem>
        <seg>c++, cc (gcc로 링크), cpp, g++, gcc,
        gcc-ar, gcc-nm, gcc-ranlib, gcov, gcov-dump, gcov-tool</seg>

        <seg>libasan.{a,so}, libatomic.{a,so}, libcc1.so, libgcc.a, libgcc_eh.a,
        libgcc_s.so, libgcov.a, libgomp.{a,so}, libitm.{a,so},
        liblsan.{a,so}, liblto_plugin.so,
        libquadmath.{a,so}, libssp.{a,so}, libssp_nonshared.a,
        libstdc++.{a,so}, libstdc++fs.a, libsupc++.a, libtsan.{a,so},
        libubsan.{a,so}</seg>

        <seg>/usr/include/c++, /usr/lib/gcc, /usr/libexec/gcc, 
        /usr/share/gcc-&gcc-version;</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">요약</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="c">
        <term><command>c++</command></term>
        <listitem>
          <para>C++ 컴파일러</para>
          <indexterm zone="ch-system-gcc c">
            <primary sortas="b-c++">c++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cc">
        <term><command>cc</command></term>
        <listitem>
          <para>C 컴파일러</para>
          <indexterm zone="ch-system-gcc cc">
            <primary sortas="b-cc">cc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cpp">
        <term><command>cpp</command></term>
        <listitem>
          <para>C 전처리기; 소스 파일에서 #include, #define 등의 유사한 구문들을 확장하기 위해 컴파일러에 의해 사용된다</para>
          <indexterm zone="ch-system-gcc cpp">
            <primary sortas="b-cpp">cpp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="g">
        <term><command>g++</command></term>
        <listitem>
          <para>C++ 컴파일러</para>
          <indexterm zone="ch-system-gcc g">
            <primary sortas="b-g++">g++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcc">
        <term><command>gcc</command></term>
        <listitem>
          <para>C 컴파일러</para>
          <indexterm zone="ch-system-gcc gcc">
            <primary sortas="b-gcc">gcc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcc-ar">
        <term><command>gcc-ar</command></term>
        <listitem>
          <para>명령줄에 플러그인을 추가하는 <command>ar</command> wrapper. 이 프로그램은 "링크 시간 최적화"를 추가하는 데만 사용되며 기본 빌드 옵션에서는 유용하지 않음</para>
          <indexterm zone="ch-system-gcc gcc-ar">
            <primary sortas="b-gcc-ar">gc-ar</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcc-nm">
        <term><command>gcc-nm</command></term>
        <listitem>
          <para>명령줄에 플러그인을 추가하는 <command>nm</command> wrapper. 이 프로그램은 "링크 시간 최적화"를 추가하는 데만 사용되며 기본 빌드 옵션에서는 유용하지 않음</para>
          <indexterm zone="ch-system-gcc gcc-nm">
            <primary sortas="b-gcc-nm">gc-nm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcc-ranlib">
        <term><command>gcc-ranlib</command></term>
        <listitem>
          <para>명령줄에 플러그인을 추가하는 <command>ranlib</command> wrapper. 이 프로그램은 "링크 시간 최적화"를 추가하는 데만 사용되며 기본 빌드 옵션에서는 유용하지 않음
          </para>
          <indexterm zone="ch-system-gcc gcc-ranlib">
            <primary sortas="b-gcc-ranlib">gc-ranlib</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcov">
        <term><command>gcov</command></term>
        <listitem>
          <para>적용 범위 테스트 도구; 최적화의 영향이 가장 효과적인 지점을 파악하기 위해 프로그램을 분석하는데 사용됨</para>
          <indexterm zone="ch-system-gcc gcov">
            <primary sortas="b-gcov">gcov</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcov-dump">
        <term><command>gcov-dump</command></term>
        <listitem>
          <para>오프라인 gcda 및 gcno 프로필 덤프 도구</para>
          <indexterm zone="ch-system-gcc gcov-dump">
            <primary sortas="b-gcov-dump">gcov-dump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcov-tool">
        <term><command>gcov-tool</command></term>
        <listitem>
          <para>오프라인 gcda 프로필 처리 도구</para>
          <indexterm zone="ch-system-gcc gcov-tool">
            <primary sortas="b-gcov-tool">gcov-tool</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libasan">
        <term><filename class="libraryfile">libasan</filename></term>
        <listitem>
          <para>Address Sanitizer 런타임 라이브러리</para>
          <indexterm zone="ch-system-gcc libasan">
            <primary sortas="b-libasan">libasan</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libatomic">
        <term><filename class="libraryfile">libatomic</filename></term>
        <listitem>
          <para>GCC atomic 내장 런타임 라이브러리</para>
          <indexterm zone="ch-system-gcc libatomic">
            <primary sortas="b-libatomic">libatomic</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcc1">
        <term><filename class="libraryfile">libcc1</filename></term>
        <listitem>
          <para>C 전처리 라이브러리</para>
          <indexterm zone="ch-system-gcc libcc1">
            <primary sortas="b-libcc1">libcc1</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgcc">
        <term><filename class="libraryfile">libgcc</filename></term>
        <listitem>
          <para><command>gcc</command>에 대한 런타임 라이브러리 포함</para>
          <indexterm zone="ch-system-gcc libgcc">
            <primary sortas="c-libgcc">libgcc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgcov">
        <term><filename class="libraryfile">libgcov</filename></term>
        <listitem>
          <para>이 라이브러리는 GCC의 프로파일링이 활성화될 때 프로그램에 링크된다.</para>
          <indexterm zone="ch-system-gcc libgcov">
            <primary sortas="c-libgcov">libgcov</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgomp">
        <term><filename class="libraryfile">libgomp</filename></term>
        <listitem>
          <para>C/C++와 포트란에서 멀티 플랫폼 공유 메모리 병렬 프로그래밍을 위한 OpenMP API의 GNU 구현</para>
          <indexterm zone="ch-system-gcc libgomp">
            <primary sortas="c-libgomp">libgomp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="liblsan">
        <term><filename class="libraryfile">liblsan</filename></term>
        <listitem>
          <para>Leak Sanitizer 런타임 라이브러리</para>
          <indexterm zone="ch-system-gcc liblsan">
            <primary sortas="c-liblsan">liblsan</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="liblto_plugin">
        <term><filename class="libraryfile">liblto_plugin</filename></term>
        <listitem>
          <para>GCC의 링크 시간 최적화(Link Time Optimization, LTO) 플러그인은 컴파일 단위 전체에 걸쳐 최적화를 수행할 수 있도록 한다</para>
          <indexterm zone="ch-system-gcc liblto_plugin">
            <primary sortas="c-liblto_plugin">liblto_plugin</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libquadmath">
        <term><filename class="libraryfile">libquadmath</filename></term>
        <listitem>
          <para>GCC Quad Precision 수학 라이브러리 API</para>
          <indexterm zone="ch-system-gcc libquadmath">
            <primary sortas="c-libquadmath">libquadmath</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libssp">
        <term><filename class="libraryfile">libssp</filename></term>
        <listitem>
          <para>GCC의 stack-smashing 보호 기능을 지원하는 루틴 포함</para>
          <indexterm zone="ch-system-gcc libssp">
            <primary sortas="c-libssp">libssp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libstdc">
        <term><filename class="libraryfile">libstdc++</filename></term>
        <listitem>
          <para>표준 C++ 라이브러리</para>
          <indexterm zone="ch-system-gcc libstdc">
            <primary sortas="c-libstdc++">libstdc++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libstdcfs">
        <term><filename class="libraryfile">libstdc++fs</filename></term>
        <listitem>
          <para>ISO/IEC TS 18822:2015 파일 시스템 라이브러리</para>
          <indexterm zone="ch-system-gcc libstdcfs">
            <primary sortas="c-libstdc++fs">libstdc++fs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libsupc">
        <term><filename class="libraryfile">libsupc++</filename></term>
        <listitem>
          <para>C++ 프로그래밍 언어 지원 루틴 제공</para>
          <indexterm zone="ch-system-gcc libsupc">
            <primary sortas="c-libsupc++">libsupc++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libtsan">
        <term><filename class="libraryfile">libtsan</filename></term>
        <listitem>
          <para>Thread Sanitizer 런타임 라이브러리</para>
          <indexterm zone="ch-system-gcc libtsan">
            <primary sortas="c-libtsan">libtsan</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libubsan">
        <term><filename class="libraryfile">libubsan</filename></term>
        <listitem>
          <para>정의되지 않은 Behavior Sanitizer 런타임 라이브러리</para>
          <indexterm zone="ch-system-gcc libubsan">
            <primary sortas="c-libubsan">libubsan</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>

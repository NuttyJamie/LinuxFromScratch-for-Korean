<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-config-symlinks">
  <?dbhtml filename="symlinks.html"?>

  <title>장치 관리</title>

  <sect2 revision="sysv">

    <title>네트워크 장치</title>

    <para>Udev는 기본적으로 펌웨어/BIOS 데이터 또는 버스, 슬롯, MAC 주소와 같은 물리적 특성을 따라 네트워크 장치를 명명한다. 이 명명 규칙의 목적은 네트워크 카드가 발견된 시간에 근거하지 않고 네트워크 장치 이름이 일관성 있게 명명되도록 하는 것이다. 예를 들어 인텔과 리얼텍이 만든 네트워크 카드가 두 장 있는 컴퓨터에서 인텔이 제작한 네트워크 카드는 eht0이 되고 리얼텍 카드는 eth1이 될 수 있다. 어떤 경우에는 재부팅 후에 카드 번호가 다시 반대로 매겨지기도 한다.</para>
    
    <para>새로운 명명 체계에서 일반적인 네트워크 장치 이름은 enp5s0 또는 wlp3s0과 같은 것이 될 것이다. 이 명명 규칙을 원하지 않는다면, 전통적인 명명 방식 또는 사용자 정의 방식을 구현할 수 있다.</para>

    <sect3>
      <title>커널 명령줄에서 영구 명명 비활성화</title>
   
      <para>eth0, eth1, 등을 사용한 전통적인 명명 방식은 커널 명령줄에 <userinput>net.ifnames=0</userinput>을 추가하여 복원할 수 있다. 이는 동일한 유형의 이더넷 장치가 하나만 있는 시스템에 가장 적합하다. 노트북은 eth0과 wlan0이라는 이름의 다중 이더넷 연결을 가지고 있으며 이 방법의 후보이기도 하다. 명령행은 GRUB 구성 파일에서 전달된다. <xref linkend="grub-cfg"/>를 참고하라.</para>
    </sect3>

    <sect3>
      <title>사용자 지정 Udev 규칙 생성</title>
   
      <para>명명 방식은 사용자 지정 Udev 규칙을 생성하여 수정할 수 있다. 초기 규칙을 생성하는 스크립트가 포함되어있다. 다음을 실행하여 이러한 규칙들을 생성하라:</para>

<screen role="install"><userinput>bash /lib/udev/init-net-rules.sh</userinput></screen>

      <para>이제 <filename>/etc/udev/rules.d/70-persistent-net.rules</filename> 파일을 열어 어떤 네트워크 장치에 어떤 이름이 할당되었는지 확인하라:</para>

<screen role="nodump"><userinput>cat /etc/udev/rules.d/70-persistent-net.rules</userinput></screen>

      <note><para>MAC 주소가 수동으로 네트워크 카드에 할당되었거나 Qemu나 Xen과 같은 가상 환경에서 MAC 주소를 할당받는 등의 경우, 주소가 일관성있게 할당되지 않기 때문에 네트워크 규칙 파일이 생성되지 않았을 수 있다. 이런 경우엔 이 방법을 사용할 수 없다.</para></note>
  
      <para>이 파일은 각 NIC에 대해 두 줄씩 이어지는 주석 블록으로 시작한다. 각 NIC의 첫 번째 줄은 하드웨어 ID(예를 들면 PCI 카드인 경우 PCI 공급 업체와 장치 ID)와 드라이버를 찾을 수 있는 경우 괄호 안에 표시하는 설명이다. 하드웨어 ID나 드라이버 모두 인터페이스를 제공할 이름을 명명하는 데 사용되지 않는다; 이 정보는 참조용일 뿐이다. 두 번째 줄은 이 NIC와 일치하고 실제로 이름을 할당하는 Udev 규칙이다.</para>
  
      <para>모든 Udev 규칙은 쉼표와 선택적 공백으로 구분된 여러 개의 키로 구성된다. 이 규칙의 키와 각각의 설명은 다음과 같다:</para>
  
      <itemizedlist>
        <listitem>
          <para><literal>SUBSYSTEM=="net"</literal> - Udev가 네트워크 카드가 아닌 장치들을 무시하도록 한다.</para>
        </listitem>
        <listitem>
          <para><literal>ACTION=="add"</literal> - Udev가 추가가 아닌 uevent에 대해서는 이 규칙을 무시하도록 한다("삭제" 및 "변경" uevents도 발생하지만 네트워크 인터페이스의 이름을 바꿀 필요는 없다).</para>
        </listitem>
        <listitem>
          <para><literal>DRIVERS=="?*"</literal> - Udev가 VLAN 또는 브릿지 하위 인터페이스를 무시하도록 한다(이들 하위 인터페이스들은 드라이버를 갖지 않기 때문). 이 하위 인터페이스들은 할당될 이름이 부모 장치들과 충돌하기 때문에 생략된다.</para>
        </listitem>
        <listitem>
          <para><literal>ATTR{address}</literal> - 이 키의 값은 NIC의 MAC 주소이다.</para>
        </listitem>
        <listitem>
          <para><literal>ATTR{type}=="1"</literal> - This ensures the rule only
          matches the primary interface in the case of certain wireless drivers,
          which create multiple virtual interfaces. The secondary interfaces are
          skipped for the same reason that VLAN and bridge sub-interfaces are
          skipped: there would be a name collision otherwise.</para>
        </listitem>
        <listitem>
          <para><literal>NAME</literal> - The value of this key is the name that
          Udev will assign to this interface.</para>
        </listitem>
      </itemizedlist>
  
      <para>The value of <literal>NAME</literal> is the important part. Make sure
      you know which name has been assigned to each of your network cards before
      proceeding, and be sure to use that <literal>NAME</literal> value when
      creating your configuration files below.</para>

    </sect3>

  </sect2>

  <sect2 revision="sysv">

    <title>CD-ROM symlinks</title>

    <para>Some software that you may want to install later (e.g., various
    media players) expect the <filename class="symlink">/dev/cdrom</filename>
    and <filename class="symlink">/dev/dvd</filename> symlinks to exist, and
    to point to a CD-ROM or DVD-ROM device. Also, it may be convenient to put
    references to those symlinks into <filename>/etc/fstab</filename>. Udev
    comes with a script that will generate rules files to create these symlinks
    for you, depending on the capabilities of each device, but you need to
    decide which of two modes of operation you wish to have the script use.</para>

    <para>First, the script can operate in <quote>by-path</quote> mode (used by
    default for USB and FireWire devices), where the rules it creates depend on
    the physical path to the CD or DVD device. Second, it can operate in
    <quote>by-id</quote> mode (default for IDE and SCSI devices), where the
    rules it creates depend on identification strings stored in the CD or DVD
    device itself. The path is determined by Udev's <command>path_id</command>
    script, and the identification strings are read from the hardware by its
    <command>ata_id</command> or <command>scsi_id</command> programs, depending
    on which type of device you have.</para>

    <para>There are advantages to each approach; the correct approach to use
    will depend on what kinds of device changes may happen. If you expect the
    physical path to the device (that is, the ports and/or slots that it plugs
    into) to change, for example because you plan on moving the drive to a
    different IDE port or a different USB connector, then you should use the
    <quote>by-id</quote> mode. On the other hand, if you expect the device's
    identification to change, for example because it may die, and you would
    replace it with a different device with the same capabilities and which
    is plugged into the same connectors, then you should use the
    <quote>by-path</quote> mode.</para>

    <para>If either type of change is possible with your drive, then choose a
    mode based on the type of change you expect to happen more often.</para>

<!-- If you use by-id mode, the symlinks will survive even the transition
     to libata for IDE drives, but that is not for the book. -->

    <important><para>External devices (for example, a USB-connected CD drive)
    should not use by-path persistence, because each time the device is plugged
    into a new external port, its physical path will change. All
    externally-connected devices will have this problem if you write Udev rules
    to recognize them by their physical path; the problem is not limited to CD
    and DVD drives.</para></important>

    <para>If you wish to see the values that the Udev scripts will use, then
    for the appropriate CD-ROM device, find the corresponding directory under
    <filename class="directory">/sys</filename> (e.g., this can be
    <filename class="directory">/sys/block/hdd</filename>) and
    run a command similar to the following:</para>

<screen role="nodump"><userinput>udevadm test /sys/block/hdd</userinput></screen>

    <para>Look at the lines containing the output of various *_id programs.
    The <quote>by-id</quote> mode will use the ID_SERIAL value if it exists and
    is not empty, otherwise it will use a combination of ID_MODEL and
    ID_REVISION. The <quote>by-path</quote> mode will use the ID_PATH value.</para>

    <para>If the default mode is not suitable for your situation, then the
    following modification can be made to the
    <filename>/etc/udev/rules.d/83-cdrom-symlinks.rules</filename> file,
    as follows (where <replaceable>mode</replaceable> is one of
    <quote>by-id</quote> or <quote>by-path</quote>):</para>

<screen role="nodump"><userinput>sed -i -e 's/"write_cd_rules"/"write_cd_rules <replaceable>mode</replaceable>"/' \
    /etc/udev/rules.d/83-cdrom-symlinks.rules</userinput></screen>

    <para>Note that it is not necessary to create the rules files or symlinks
    at this time, because you have bind-mounted the host's
    <filename class="directory">/dev</filename> directory into the LFS system,
    and we assume the symlinks exist on the host. The rules and symlinks will
    be created the first time you boot your LFS system.</para>

    <para>However, if you have multiple CD-ROM devices, then the symlinks
    generated at that time may point to different devices than they point to on
    your host, because devices are not discovered in a predictable order. The
    assignments created when you first boot the LFS system will be stable, so
    this is only an issue if you need the symlinks on both systems to point to
    the same device. If you need that, then inspect (and possibly edit) the
    generated <filename>/etc/udev/rules.d/70-persistent-cd.rules</filename>
    file after booting, to make sure the assigned symlinks match what you need.</para>

  </sect2>

  <sect2>

    <title>Dealing with duplicate devices</title>

    <para>As explained in <xref linkend="ch-config-udev"/>, the order in
    which devices with the same function appear in
    <filename class="directory">/dev</filename> is essentially random.
    E.g., if you have a USB web camera and a TV tuner, sometimes
    <filename>/dev/video0</filename> refers to the camera and
    <filename>/dev/video1</filename> refers to the tuner, and sometimes
    after a reboot the order changes to the opposite one.
    For all classes of hardware except sound cards and network cards, this is
    fixable by creating Udev rules for custom persistent symlinks.
    The case of network cards is covered separately in
    <xref linkend="ch-config-network"/>, and sound card configuration can
    be found in <ulink url="&blfs-book;postlfs/devices.html">BLFS</ulink>.</para>

    <para>For each of your devices that is likely to have this problem
    (even if the problem doesn't exist in your current Linux distribution),
    find the corresponding directory under
    <filename class="directory">/sys/class</filename> or
    <filename class="directory">/sys/block</filename>.
    For video devices, this may be
    <filename
    class="directory">/sys/class/video4linux/video<replaceable>X</replaceable></filename>.
    Figure out the attributes that identify the device uniquely (usually,
    vendor and product IDs and/or serial numbers work):</para>

<screen role="nodump"><userinput>udevadm info -a -p /sys/class/video4linux/video0</userinput></screen>

    <para>Then write rules that create the symlinks, e.g.:</para>

<screen role="nodump"><userinput>cat &gt; /etc/udev/rules.d/83-duplicate_devs.rules &lt;&lt; "EOF"
<literal>
# Persistent symlinks for webcam and tuner
KERNEL=="video*", ATTRS{idProduct}=="1910", ATTRS{idVendor}=="0d81", \
    SYMLINK+="webcam"
KERNEL=="video*", ATTRS{device}=="0x036f", ATTRS{vendor}=="0x109e", \
    SYMLINK+="tvtuner"
</literal>
EOF</userinput></screen>

    <para>The result is that <filename>/dev/video0</filename> and
    <filename>/dev/video1</filename> devices still refer randomly to the tuner
    and the web camera (and thus should never be used directly), but there are
    symlinks <filename>/dev/tvtuner</filename> and
    <filename>/dev/webcam</filename> that always point to the correct
    device.</para>

 </sect2>

</sect1>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  <!ENTITY site               SYSTEM "../appendices/rc.site.script">
  %general-entities;
]>

<sect1 id="ch-config-usage" revision="sysv">
  <?dbhtml filename="usage.html"?>

  <title>System V 부트스크립트 사용 및 설정</title>

  <indexterm zone="ch-config-usage">
    <primary sortas="a-Bootscripts">Bootscripts</primary>
    <secondary>usage</secondary>
  </indexterm>

  <sect2>
    <title>System V 부트스크립트의 작동 방식</title>

    <para>리눅스는 <emphasis>run-levels</emphasis>의 개념을 기반으로 하는 SysVinit이라는 특수 부팅 기능을 사용한다. 이는 시스템마다 상당히 다를 수 있기 때문에, 특정한 리눅스 배포판에서 잘 작동했다고 해서 LFS에서도 똑같이 작동하리라 보장할 수 없다. LFS는 나름대로의 방법이 있지만, 보편적으로 받아들여지는 기준을 존중한다.</para>
  
    <para>SysVinit(이제부터는 <quote>init</quote>로 지칭한다)는 run-levels 체계를 사용하여 작업한다. run-levels는 0부터 6까지 7개이고(실제로는 더 많지만, 특별한 경우를 위한 것으로 일반적으로는 잘 사용되지 않는다. 자세한 내용은 <filename>init(8)</filename>를 참고하라), 각 레벨은 컴퓨터가 시작될 때 수행해야 하는 작업에 해당된다. 기본 run-level은 3이다. 다음은 구현된 다양한 run-level에 대한 설명이다:</para>

<literallayout>0: 컴퓨터를 종료함
1: 싱글 유저 모드
2: 네트워크 미포함 멀티 유저 모드
3: 네트워크 포함 멀티 유저 모드
4: 사용자 정의를 위해 보류되어 있음, 사용자 정의되지 않았다면 3과 같이 작동
5: 4와 같음, 보통 GUI 로그인을 위해 사용(X의 <command>xdm</command>이나 KDE의 <command>kdm</command>)
6: 컴퓨터를 재시작함</literallayout>

  </sect2>

  <sect2 id="conf-sysvinit" role="configuration">
  <title>Sysvinit 설정</title>

  <indexterm zone="conf-sysvinit">
    <primary sortas="a-Sysvinit">Sysvinit</primary>
    <secondary>configuring</secondary>
  </indexterm>

  <indexterm zone="conf-sysvinit">
    <primary sortas="e-/etc/inittab">/etc/inittab</primary>
  </indexterm>

  <para>커널 초기화 중에, 실행되는 첫 번째 프로그램은 명령줄에 명시되거나 기본적으로는 <command>init</command>이다. 이 프로그램은 초기화 파일인 <filename>/etc/inittab</filename>를 읽어들인다. 다음을 실행하여 이 파일을 생성하라:</para>

<screen><userinput>cat &gt; /etc/inittab &lt;&lt; "EOF"
<literal># Begin /etc/inittab

id:3:initdefault:

si::sysinit:/etc/rc.d/init.d/rc S

l0:0:wait:/etc/rc.d/init.d/rc 0
l1:S1:wait:/etc/rc.d/init.d/rc 1
l2:2:wait:/etc/rc.d/init.d/rc 2
l3:3:wait:/etc/rc.d/init.d/rc 3
l4:4:wait:/etc/rc.d/init.d/rc 4
l5:5:wait:/etc/rc.d/init.d/rc 5
l6:6:wait:/etc/rc.d/init.d/rc 6

ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now

su:S016:once:/sbin/sulogin

1:2345:respawn:/sbin/agetty --noclear tty1 9600
2:2345:respawn:/sbin/agetty tty2 9600
3:2345:respawn:/sbin/agetty tty3 9600
4:2345:respawn:/sbin/agetty tty4 9600
5:2345:respawn:/sbin/agetty tty5 9600
6:2345:respawn:/sbin/agetty tty6 9600

# End /etc/inittab</literal>
EOF</userinput></screen>

  <para>이 초기화 파일에 대한 설명은 <emphasis>inittab</emphasis>의 man 페이지에 있다. LFS의 경우 실행 명령은 <command>rc</command>이다. 위의 초기화 파일은 <filename class="directory">/etc/rc.d/rcS.d</filename> 디렉토리에서 S로 시작하는 모든 스크립트와, <filename class="directory">/etc/rc.d/rc?.d</filename> 디렉토리(물음표는 initdefault 값으로 대체)에서 S로 시작하는 모든 스크립트를 실행하도록 <command>rc</command>에 지시한다.</para>

  <para>편의상 <command>rc</command> 스크립트는 <filename class="directory">/lib/lsb/init-functions</filename>의 함수 라이브러리를 읽는다. 이 라이브러리는 선택적 구성 파일인 <filename>/etc/sysconfig/rc.site</filename>도 읽는다. 이후 섹션에서 설명하는 어떤 시스템 구성 파일 매개 변수든 이 파일에 배치해서 이 파일 하나에 모든 시스템 매개 변수를 통합할 수 있다.</para>

  <para>디버깅 상의 편의를 위해, functions 스크립트는 모든 출력을 <filename>/run/var/bootlog</filename>에 기록한다. <filename class="directory">/run</filename> 디렉토리는 tmpfs이므로 이 파일은 부팅 시 보존되지 않지만, 부팅 절차가 끝날 때 영구적인 <filename>/var/log/boot.log</filename> 파일에 추가된다.</para>

  <sect3 id="init-levels" >
  <title>Run Levels 변경</title>

  <para>run-levels 변경은 <command>init <replaceable>&lt;runlevel&gt;</replaceable></command>을 통해 이루어지며, 여기서 <replaceable>&lt;runlevel&gt;</replaceable>은 대상 run-level이다. 예를 들어, 시스템을 재부팅하기 위해 사용자는 <command>reboot</command> 명령의 별칭인 <command>init 6</command> 명령을 실행할 수 있다. 마찬가지로, <command>init 0</command>은 <command>halt</command> 명령의 별칭이다.</para>

  <para><filename class="directory">/etc/rc.d</filename> 아래에는 <filename class="directory">rcsysinit.d</filename>와 <filename class="directory">rc?.d</filename>(여기서 ? 는 run-level의 번호)같은 디렉토리 등의 여러 디렉토리가 있으며, 모두 다수의 심볼릭 링크를 포함하고 있다. 어떤 것은 <emphasis>K</emphasis>로 시작하고, 다른 일부는 <emphasis>S</emphasis>로 시작하며, 그들 모두는 첫 글자에 이어 두 개의 숫자를 갖고 있다. K는 서비스를 중지(종료)하고 S는 서비스를 시작하는 것을 의미한다. 숫자는 00에서 99까지 스크립트가 실행되는 순서를 결정한다&mdash;숫자가 낮을수록 더 빨리 실행된다. <command>init</command>가 다른 run-level로 전환되면, 선택한 runlevel에 따라 적절한 서비스가 시작되거나 중지된다.</para>

  <para>실제 스크립트들은 <filename class="directory">/etc/rc.d/init.d</filename>에 있다. 실제로 동작하는 것은 그것들이고 심볼릭 링크들은 모두 그것들을 가리킨다. K 링크와 S 링크는 <filename class="directory">/etc/rc.d/init.d</filename>의 동일한 스크립트를 가리킨다. <parameter>start</parameter>, <parameter>stop</parameter>, <parameter>restart</parameter>, <parameter>reload</parameter>, 및 <parameter>status</parameter>와 같은 다른 매개 변수를 사용하여 스크립트를 호출할 수 있기 때문이다. K 링크가 호출되면 적절한 스크립트가 <parameter>stop</parameter> 인수와 함께 실행된다. S 링크가 발생하면 <parameter>start</parameter> 인수와 함께 적절한 스크립트가 실행된다.</para>

  <para>이 설명에는 한 가지 예외가 있다. <filename class="directory">rc0.d</filename>와 <filename class="directory">rc6.d</filename> 디렉토리의 <emphasis>S</emphasis>로 시작하는 링크들은 어떤 것도 시작시키지 않는다. 그것들은 무언가를 중단시키기 위해 매개 변수 <parameter>stop</parameter>과 함께 호출된다. 요지는 사용자가 시스템을 재부팅하거나 종료할 때는 아무것도 시작할 필요가 없다는 것이다. 시스템은 오로지 중단되기만 하면 된다.</para>

  <para>다음은 스크립트가 인수에 따라 수행하는 작업에 대한 설명이다:</para>

  <variablelist>

    <varlistentry>
      <term><parameter>start</parameter></term>
      <listitem>
        <para>서비스가 시작된다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter>stop</parameter></term>
      <listitem>
        <para>서비스가 중지된다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter>restart</parameter></term>
      <listitem>
        <para>서비스가 중지되었다가 다시 시작된다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter>reload</parameter></term>
      <listitem>
        <para>
        서비스 구성이 업데이트된다. 이는 서비스의 구성 파일이 수정된 후 서비스를 재시작할 필요가 없을 때 사용된다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter>status</parameter></term>
      <listitem>
        <para>서비스가 실행 중인지, PID가 몇인지 출력한다.</para>
      </listitem>
    </varlistentry>

  </variablelist>

  <para>부팅 프로세스가 작동하는 방식을 자유롭게 수정하라(어떻게 하든 간에 결국 당신만의 LFS 시스템이다). 여기서 주어진 파일들은 이를 수행하는 방법의 예시이다.</para>

  </sect3>
  </sect2>

  <sect2>
    <title>Udev 부트스크립트</title>

      <para><filename>/etc/rc.d/init.d/udev</filename> initscript는 <command>udevd</command>를 시작하고, 커널에 의해 이미 생성된 "coldplug" 장치를 작동시키며 규칙이 완료될 때까지 기다린다. 또 스크립트는 <filename>/sbin/hotplug </filename>의 기본값으로부터 uevent 핸들러를 해제한다. 이는 커널이 더 이상 외부 바이너리를 호출할 필요가 없기 때문이다. 대신 <command>udevd</command>는 커널이 발생시키는 uevent를 netlink 소켓에서 수신한다.</para>

      <para><command>/etc/rc.d/init.d/udev_retry</command> initscript는 규칙이 (<command>mountfs</command> 스크립트가 실행될 때까지 마운트되지 않은) 파일 시스템에 의존할 수 있는 하위 시스템에 대한 재작동(re-triggering) 이벤트를 처리한다(특히 <filename class="directory">/usr</filename>와 <filename class="directory">/var</filename>가 이런 문제를 일으킬 수 있다). 
      이 스크립트는 <command>mountfs</command> 스크립트 이후에 실행되므로, 이러한 규칙(재작동된 경우)은 두 번째로 성공할 것이다. 이 파일은 <filename>/etc/sysconfig/udev_retry</filename> 파일로부터 구성된다; 이 파일에서 주석 이외의 모든 단어는 재시도 시 트리거할 하위 시스템 이름으로 간주된다. 장치의 하위 시스템을 찾으려면 <command>udevadm info --attribute-walk &lt;device&gt;</command>를 사용하라. 여기서 &lt;device&gt;는 /dev/sr0 또는 /sys/class/rtc 같은 /dev나 /sys의 절대 경로이다.</para>

      <para>커널 모듈 로드 및 udev에 대한 정보는 <xref linkend="module-loading"/>를 참고하라.</para>
<!--
    <sect3>
      <title>Module Loading</title>

      <para>Device drivers compiled as modules may have aliases built into them.
      Aliases are visible in the output of the <command>modinfo</command>
      program and are usually related to the bus-specific identifiers of devices
      supported by a module. For example, the <emphasis>snd-fm801</emphasis>
      driver supports PCI devices with vendor ID 0x1319 and device ID 0x0801,
      and has an alias of <quote>pci:v00001319d00000801sv*sd*bc04sc01i*</quote>.
      For most devices, the bus driver exports the alias of the driver that
      would handle the device via <systemitem
      class="filesystem">sysfs</systemitem>. E.g., the
      <filename>/sys/bus/pci/devices/0000:00:0d.0/modalias</filename> file
      might contain the string
      <quote>pci:v00001319d00000801sv00001319sd00001319bc04sc01i00</quote>.
      The default rules provided with Udev will cause <command>udevd</command>
      to call out to <command>/sbin/modprobe</command> with the contents of the
      <envar>MODALIAS</envar> uevent environment variable (which should be the
      same as the contents of the <filename>modalias</filename> file in sysfs),
      thus loading all modules whose aliases match this string after wildcard
      expansion.</para>

      <para>In this example, this means that, in addition to
      <emphasis>snd-fm801</emphasis>, the obsolete (and unwanted)
      <emphasis>forte</emphasis> driver will be loaded if it is
      available. See below for ways in which the loading of unwanted drivers can
      be prevented.</para>

      <para>The kernel itself is also able to load modules for network
      protocols, filesystems and NLS support on demand.</para>

    </sect3>

    <sect3>
      <title>Handling Hotpluggable/Dynamic Devices</title>

      <para>When you plug in a device, such as a Universal Serial Bus (USB) MP3
      player, the kernel recognizes that the device is now connected and
      generates a uevent. This uevent is then handled by
      <command>udevd</command> as described above.</para>

    </sect3>
-->
  </sect2>

  <sect2 id="ch-config-clock">
    <title>시스템 시계 설정</title>

    <indexterm zone="ch-config-clock">
      <primary sortas="d-setclock">setclock</primary>
    <secondary>configuring</secondary></indexterm>

    <para><command>setclock</command> 스크립트는 BIOS 또는 CMOS(Complementary Metal Oxide Semiconductor) 시계라고도 하는 하드웨어 시계로부터 시간을 읽어 들인다. 하드웨어 시계가 UTC로 설정된 경우, 이 스크립트는 <filename>/etc/localtime</filename> 파일(사용자가 속해 있는 시간대를 <command>hwclock</command> 프로그램에 알려주는 파일)을 사용하여 하드웨어 시계의 시간을 로컬 시간으로 변환한다. 하드웨어 클럭이 UTC로 설정되어 있는지 여부를 확인할 방법이 없으므로 수동으로 설정해야 한다.</para>

    <para><command>setclock</command>은 커널이 부팅 시 하드웨어 기능을 감지할 때 <application>udev</application>를 통해 실행된다. 시스템 시간을 CMOS 시계에 저장하기 위해 stop 매개 변수를 사용하여 수동으로 실행할 수도 있다.</para>

    <para>하드웨어 시계가 UTC로 설정되어 있는지의 여부를 기억할 수 없다면 <userinput>hwclock --localtime --show</userinput> 명령을 실행하여 확인하라. 이는 하드웨어 시계에 따라 현재 시간을 표시한다. 만약 이 시간이 당신의 다른 시계와 일치하면, 하드웨어 시계는 현지 시간으로 설정된 것이다. <command>hwclock</command>의 출력이 현지 시간이 아니라면 UTC 시간으로 설정됐을 가능성이 있다. <command>hwclock</command>에서 표시된 시간에 적절한 시간대를 더하거나 빼서 확인해보라. 예를 들어 현재 GMT -0700이라고도 하는 MST 표준 시간대에 있다면, 현지 시간에 7시간을 더하라.</para>

    <para>하드웨어 시계가 UTC 시간으로 설정되지 <emphasis>않았다면</emphasis> 아래의 <envar>UTC</envar> 변수의 값을 <parameter>0</parameter>(zero)으로 변경하라.</para>

    <para>다음을 실행하여 새 <filename>/etc/sysconfig/clock</filename> 파일을 생성하라:</para>

<screen><userinput>cat &gt; /etc/sysconfig/clock &lt;&lt; "EOF"
<literal># Begin /etc/sysconfig/clock

UTC=1

# Set this to any options you might need to give to hwclock,
# such as machine hardware clock type for Alphas.
CLOCKPARAMS=

# End /etc/sysconfig/clock</literal>
EOF</userinput></screen>

    <para>LFS에서 시간을 다루는 방식을 설명하는 좋은 힌트들을 <ulink url="&hints-root;time.txt"/>에서 확인할 수 있다. 시간대, UTC, <envar>TZ</envar> 환경 변수와 같은 문제들을 설명한다.</para>

    <note><para>CLOCKPARAMS와 UTC 매개 변수는 <filename>/etc/sysconfig/rc.site</filename> 파일에서 대신 설정할 수 있다.</para></note>

  </sect2>

  <sect2 id="ch-config-console">
  <?dbhtml filename="console.html"?>

  <title>리눅스 콘솔 설정</title>

  <indexterm zone="ch-config-console">
    <primary sortas="d-console">console</primary>
    <secondary>configuring</secondary>
  </indexterm>

  <para>이 절에서는 키보드 맵, 콘솔 글꼴 및 콘솔 커널 로그 레벨을 설정하는, <command>console</command> 부트스크립트를 설정하는 방법을 설명한다. 
  ASCII 문자가 아닌 문자(예: 저작권 기호, 영국 파운드 기호 및 유로 기호)를 사용하지 않으며 키보드가 미국식 키보드라면 이 절의 많은 부분을 건너뛸 수 있다. 설정 파일이 없으면,(또는 <filename>rc.site</filename>의 같은 설정), <command>console</command> 부트스크립트는 아무 작업도 수행하지 않는다.</para>

  <para><command>console</command> 스크립트는 설정 정보를 위해 <filename>/etc/sysconfig/console</filename> 파일을 읽는다. 사용할 키맵과 화면 글꼴을 결정하라. 다양한 언어별 HOWTO도 도움이 될 수 있다(<ulink url="http://www.tldp.org/HOWTO/HOWTO-INDEX/other-lang.html"/>를 참고하라). 그래도 문제가 해결되지 않는다면 <filename class="directory">/usr/share/keymaps</filename>와 <filename class="directory">/usr/share/consolefonts</filename> 디렉토리에서 유효한 키맵과 화면 글꼴을 확인하라. <filename>loadkeys(1)</filename> 및 <filename>setfont(8)</filename> 매뉴얼 페이지를 읽고 이러한 프로그램에 대한 올바른 인수를 결정하라.</para>

  <para><filename>/etc/sysconfig/console</filename> 파일에는 다음과 같은 형식의 행이 포함되어야 한다: VARIABLE="value". 다음과 같은 변수들이 인식된다:</para>
  <variablelist>

    <varlistentry>
      <term>LOGLEVEL</term>
      <listitem>
        <para>이 변수는 <command>dmesg</command>로 설정된 콘솔로 보낸 커널 메시지의 로그 수준을 지정한다. 유효한 수준은 "1"(메시지 없음)에서 "8"까지이다. 기본값은 "7"이다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>KEYMAP</term>
      <listitem>
        <para>이 변수는 대표적으로 로드할 키맵의 이름(예: <quote>it</quote>)과 같은, <command>loadkeys</command> 프로그램에 대한 인수를 지정한다. 이 변수를 설정하지 않으면 부트스크립트가 <command>loadkeys</command> 프로그램을 실행하지 않고 기본 커널 키맵이 사용된다. 몇 개의 키맵에는 동일한 이름의 여러 버전이 있다(qwerty/와 qwertz/에는 cz와 그 변형들, olpc/와 qwerty/에는 es, 그리고 fgGIod/와 qwerty/에는 trf). 이 경우 적절한 키맵이 로드되도록 상위 디렉토리(예: qwerty/es)도 지정해야 한다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>KEYMAP_CORRECTIONS</term>
      <listitem>
        <para>이 (드물게 쓰이는) 변수는 <command>loadkeys</command> 프로그램에 대한 두 번째 호출에 대한 인수를 지정한다. 이는 기본 키맵이 전혀 만족스럽지 않고 약간 조정이 필요할 경우에 유용하다. 예를 들어 기본적으로 유로 기호를 포함하지 않는 키맵에 유로 기호를 포함시키려면 이 변수를 <quote>euro2</quote>로 설정하라.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>FONT</term>
      <listitem>
        <para>이 변수는 <command>setfont</command> 프로그램에 대한 인수를 지정한다. 여기엔 대표적으로 글꼴 이름인 <quote>-m</quote>과, 로드할 응용 문자맵의 이름이 포함된다. 예를 들어 <quote>lat1-16</quote> 글꼴을 <quote>8859-1</quote> 응용 문자맵(미국에서는 적절한)과 함께 로드하려면, 이 변수를 <quote>lat1-16 -m 8859-1</quote>로 설정하라.
        <!-- because of the copyright sign -->
        UTF-8 모드에서 커널은 키맵에 구성된 8비트 키코드를 UTF-8로 전환하기 위해 응용 문자맵을 사용한다. 따라서 "-m" 매개 변수의 인수는 키맵에 구성된 키코드의 인코딩으로 설정되어야 한다.</para>

      </listitem>
    </varlistentry>

    <varlistentry>
      <term>UNICODE</term>
      <listitem>
        <para>콘솔을 UTF-8 모드로 전환하려면 이 변수를 <quote>1</quote>, <quote>yes</quote> 또는 <quote>true</quote>로 설정하라. 이는 UTF-8 기반 로케일에서 유용하며 UTF-8 기반 로케일이 아닐 경우엔 해를 끼칠 수 있다.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>LEGACY_CHARSET</term>
      <listitem>
        <para>많은 키보드 레이아웃의 경우, Kbd 패키지의 기본 유니코드 키맵이 없다. <command>console</command> 부트스크립트는 이 변수가 사용 가능한 비 UTF-8 키맵의 인코딩으로 설정된 경우, 즉시 사용 가능한 키맵을 UTF-8로 전환한다.</para>
      </listitem>
    </varlistentry>

  </variablelist>

  <para>몇 가지 예시:</para>

  <itemizedlist>

    <listitem>
      <para>유니코드가 아닌 설정에서는 일반적으로 KEYMAP과 FONT 변수만 있으면 된다. 가령 폴란드어 설정은 다음과 같다:</para>
<screen role="nodump"><userinput>cat &gt; /etc/sysconfig/console &lt;&lt; "EOF"
<literal># Begin /etc/sysconfig/console

KEYMAP="pl2"
FONT="lat2a-16 -m 8859-2"

# End /etc/sysconfig/console</literal>
EOF</userinput></screen>
    </listitem>

    <listitem>
      <para>위에서 언급했듯이, 가끔 기본 키맵을 약간 조정해야할 수 있다. 다음 예시는 독일어 키맵에 유로 기호를 추가한다:</para>

<screen role="nodump"><userinput>cat &gt; /etc/sysconfig/console &lt;&lt; "EOF"
<literal># Begin /etc/sysconfig/console

KEYMAP="de-latin1"
KEYMAP_CORRECTIONS="euro2"
FONT="lat0-16 -m 8859-15"
UNICODE="1"

# End /etc/sysconfig/console</literal>
EOF</userinput></screen>
    </listitem>

    <listitem>
      <para>다음은 기본 UTF-8 키맵이 존재하는, 유니코드가 사용 가능한  불가리아어 예시이다:</para>
<!-- This is what is used by jhalfs for creating the console file: whenever
     you change the following, please inform the jhalfs maintainer(s). -->
<screen><userinput>cat &gt; /etc/sysconfig/console &lt;&lt; "EOF"
<literal># Begin /etc/sysconfig/console

UNICODE="1"
KEYMAP="bg_bds-utf8"
FONT="LatArCyrHeb-16"

# End /etc/sysconfig/console</literal>
EOF</userinput></screen>
    </listitem>

    <listitem>
      <para>이전 예시에서 512-glyph LatArCyrHeb-16 글꼴을 사용했기 때문에, 프레임 버퍼를 사용하지 않는 한 리눅스 콘솔에서 밝은 색상은 더 이상 사용할 수 없다. 프레임버퍼 없이 밝은 색을 원하며 자신의 언어에 속하지 않는 문자를 사용하지 않아도 된다면, 아래와 같이 언어별 256-glyph 글꼴을 사용하는 것이 여전히 가능하다:</para>

<screen role="nodump"><userinput>cat &gt; /etc/sysconfig/console &lt;&lt; "EOF"
<literal># Begin /etc/sysconfig/console

UNICODE="1"
KEYMAP="bg_bds-utf8"
FONT="cyr-sun16"

# End /etc/sysconfig/console</literal>
EOF</userinput></screen>
    </listitem>

    <listitem>
      <para>다음 예제는 ISO-8859-15에서 UTF-8로의 키맵 자동 변환과 유니코드 모드에서 데드키를 활성화 하는 법을 보여준다:</para>

<screen role="nodump"><userinput>cat &gt; /etc/sysconfig/console &lt;&lt; "EOF"
<literal># Begin /etc/sysconfig/console

UNICODE="1"
KEYMAP="de-latin1"
KEYMAP_CORRECTIONS="euro2"
LEGACY_CHARSET="iso-8859-15"
FONT="LatArCyrHeb-16 -m 8859-15"

# End /etc/sysconfig/console</literal>
EOF</userinput></screen>
    </listitem>

    <listitem>
      <para>일부 키맵에는 데드키(즉, 스스로 문자를 생성하지 않고 그 뒤의 입력으로 생성된 문자에 액센트를 붙이는 키)가 있거나 구성 규칙을 가진다(예: 기본 키맵에서 <quote>&AElig;를 입력하기 위해 Ctrl+. A E를 누름</quote>). 리눅스-&linux-version;은 함께 합성할 원본 문자가 멀티바이트가 아닐 때만 키맵에서 데드 키와 구성 규칭을 올바르게 해석한다. 이 결함은 유럽 언어의 키맵에는 영향을 미치지 않는데, 왜냐하면 악센트가 없는 ASCII 문자에 악센트를 추가되거나 두 개의 ASCII 문자가 함께 결합되기 때문이다. 그러나 UTF-8 모드에서는, 예를 들어 그리스어의 경우, 문자 <quote>alpha</quote>에 악센트를 붙여야 하는 문제가 있다. 해결책은 UTF-8의 사용을 피하거나, 입력 처리에서 이러한 제한이 없는 X 윈도 시스템을 설치하는 것이다.</para>
    </listitem>

    <listitem>
      <para>한국어, 일본어, 중국어 및 일부 다른 언어의 경우, 리눅스 콘솔을 해당 언어가 표시되도록 구성할 수 없다. 이러한 언어가 필요한 사용자는 X 윈도 시스템, 필요한 문자 범위를 포함하는 글꼴 및 적절한 입력 방법(예를 들어 SCIM, 다양한 언어를 지원)을 설치해야 한다.</para>
    </listitem>

  </itemizedlist>

  <!-- Added because folks keep posting their console file with X questions
  to blfs-support list -->
  <note>
    <para><filename>/etc/sysconfig/console</filename> 파일은 리눅스 텍스트 콘솔 언어만을 제어한다. X 윈도 시스템의 적절한 키보드 레이아웃과 터미널 글꼴을 설정하는 것이나, ssh 세션 또는 시리얼 콘솔과는 아무 관련이 없다. 이런 상황에서는 위의 마지막 두 항목에 언급된 제한이 적용되지 않는다.</para>
  </note>

  </sect2>

  <sect2 id="ch-config-createfiles">
    <title>부팅 시 파일 생성</title>
  
    <indexterm zone="ch-config-createfiles">
      <primary sortas="d-createfiles">File creation at boot</primary>
      <secondary>configuring</secondary>
    </indexterm>
  
    <para>가끔은 부팅 시에 파일을 생성하는 것이 필요할 때도 있다. 예를 들어 <filename class="directory">/tmp/.ICE-unix</filename> 디렉토리가 필요할 수 있다. 이 작업은 <filename>/etc/sysconfig/createfiles</filename> 구성 스크립트에 항목을 생성하여 수행할 수 있다. 이 파일의 형식은 기본 구성 파일의 주석에 포함되어 있다.</para>
  </sect2>

  <sect2 id="ch-config-sysklogd">
    <title>sysklogd 스크립트 구성</title>
  
    <indexterm zone="ch-config-sysklogd">
      <primary sortas="d-sysklogd">sysklogd</primary>
      <secondary>configuring</secondary>
    </indexterm>
  
    <para><filename>sysklogd</filename> 스크립트는 System V 초기화 중 <command>syslogd</command> 프로그램을 호출한다. <parameter>-m 0</parameter> 옵션은 <command>syslogd</command>가 로그 파일에 기본적으로 20분마다 기록하는 주기적인 타임스탬프 표시를 해제한다. 이 주기적 타임스탬프 표시를 활성화하려면, <filename>/etc/sysconfig/rc.site</filename>를 편집하고 SYSKLOGD_PARMS 변수를 원하는 값으로 정의하라. 예를 들어, 모든 매개 변수를 제거하려면 변수를 빈 값으로 설정하라:</para>

<screen role="nodump">SYSKLOGD_PARMS=</screen>

    <para>더 많은 옵션은 <userinput>man syslogd</userinput>를 참고하라.</para>

  </sect2>

  <sect2 id="ch-config-site">
    <title>rc.site 파일</title>
  
    <indexterm zone="ch-config-site">
      <primary sortas="a-rc.site">rc.site</primary>
    </indexterm>
  
    <para>선택 사항인 <filename>/etc/sysconfig/rc.site</filename> 파일에는 각 SystemV 부트 스크립트에 대해 자동으로 설정되는 설정이 포함되어 있다. <filename class='directory'>/etc/sysconfig/</filename> 디렉토리의 <filename>hostname</filename>, <filename>console</filename>, 그리고 <filename>clock</filename> 파일에 지정된 값을 대체할 수 있다. 관련 변수들이 이러한 별도 파일과 <filename>rc.site</filename> 모두에 존재할 경우, 이 스크립트의 특정 값이 우선한다.</para>
  
    <para><filename>rc.site</filename>에는 부팅 프로세스의 다른 부분을 사용자 정의할 수 있는 매개 변수도 포함되어 있다. IPROMPT 변수를 설정하면 부팅 스크립트를 선택적으로 실행할 수 있다. 다른 옵션은 파일 주석에 설명되어 있다. 파일의 기본 버전은 다음과 같다:</para>
  
    <!-- Use role to fix a pdf generation problem -->
    <screen role="auto">&site;</screen>
  
    <sect3>
      <title>부팅 및 시스템 종료 스크립트 사용자 정의</title>
  
      <para>LFS 부트 스크립트는 상당히 효율적인 방식으로 시스템을 부팅하고 종료하지만, rc.site 파일에서 속도를 더욱 향상시키고 사용자의 선호에 따라 메시지를 조정할 수 있는 몇 가지 방법이 있다. 이렇게 하려면 위의 <filename>/etc/sysconfig/rc.site</filename> 파일에서 설정을 조정하라.</para>
  
      <itemizedlist>
  
      <listitem><para>부트 스크립트 <filename>udev</filename>에는 완료하는 데 약간의 시간이 걸리는 <command>udev settle</command>이라고 하는 호출이 있다. 시스템에 있는 장치에 따라 시간이 걸리거나 걸리지 않을 수 있다. 단순 파티션과 단일 이더넷 카드만 있는 경우 부팅 프로세스는 이 명령을 기다릴 필요가 없다. 이를 건너 뛰려면 변수를 다음과 같이 설정하라: OMIT_UDEV_SETTLE=y</para></listitem>
  
      <listitem><para>부트 스크립트 <filename>udev_retry</filename>도 마찬가지로 <command>udev settle</command>을 기본적으로 실행한다. 이 명령은 <filename class='directory'>/var</filename> 디렉토리가 별도로 마운트된 경우에만 필요하다. 시계에 <filename>/var/lib/hwclock/adjtime</filename> 파일이 필요하기 때문이다. 다른 사용자 정의도 udev가 완료될 때까지 기다려야 할 수 있지만, 대부분은 불필요하다. 다음과 같이 변수를 설정하여 이 명령을 건너 뛴다: OMIT_UDEV_RETRY_SETTLE=y.
      </para></listitem>
  
      <listitem><para>기본적으로, 파일 시스템 검사는 암묵적으로 진행된다. 이는 부팅 프로세스가 지연되는 것처럼 보일 수 있다. <command>fsck</command> 출력을 활성화하려면 다음과 같이 변수를 설정하라: VERBOSE_FSCK=y.
      </para></listitem>
  
      <listitem><para>재부팅할 때 파일 시스템 검사(<command>fsck</command>)를 건너뛰려면 <filename>/fastboot</filename> 파일을 만들거나, <command>/sbin/shutdown -f -r now</command> 명령으로 시스템을 재부팅하라. 반면에 <filename>/forcefsck</filename>를 만들거나 <parameter>-f</parameter> 매개 변수 대신 <parameter>-F</parameter>와 함께 <command>shutdown</command> 명령을 실행하면 모든 파일 시스템을 강제로 검사할 수도 있다.</para>
  
      <para>FASTBOOT=y로 설정하면 이 옵션을 지울때 까지 부팅 과정에서 <command>fsck</command>를 비활성화한다. 이는 영구적인 설정으로는 권장하지 않는다.</para></listitem>
  
      <listitem><para>일반적으로 <filename class='directory'>/tmp</filename> 디렉토리의 모든 파일은 부팅 시 삭제된다. 이는 존재하는 파일이나 디렉토리의 수에 따라 부팅 과정이 현저하게 지연될 수 있다. 이러한 파일 제거를 건너뛰려면 다음과 같이 설정하라: SKIPTMPCLEAN=y.</para></listitem>
  
      <listitem><para>시스템 종료 중 <command>init</command> 프로그램은 시작된 각 프로그램 (예: agetty)에 TERM 신호를 보내고 설정된 시간(기본값 3초)을 기다린 뒤, 각 프로세스에 KILL 신호를 보낸 후 다시 기다린다. 이 과정은 각자 고유한 스크립트에 의해 종료되지 않은 모든 프로세스들을 대상으로 <command>sendsignals</command> 스크립트에 의해 반복된다. <command>init</command>의 대기 시간은 매개 변수로 조절할 수 있다. 예를 들어 <command>init</command>의 대기 시간을 없애려면, 시스템 종료나 재부팅할 때 -t0 매개 변수를 사용하라(예를 들면 <command>/sbin/shutdown -t0 -r now</command>). <command>sendsignals</command> 스크립트의 대기 시간은 다음과 같이 매개 변수를 설정하여 건너뛸 수 있다: KILLDELAY=0.</para></listitem>
  
      </itemizedlist>
  
    </sect3>
  </sect2>
</sect1>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-bootable-kernel" role="wrap">
  <?dbhtml filename="kernel.html"?>

  <sect1info condition="script">
    <productname>kernel</productname>
    <productnumber>&linux-version;</productnumber>
    <address>&linux-url;</address>
  </sect1info>

  <title>리눅스-&linux-version;</title>

  <indexterm zone="ch-bootable-kernel">
    <primary sortas="a-Linux">Linux</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>이 리눅스 패키지는 리눅스 커널을 포함하고 있다.</para>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&linux-ch8-sbu;</seg>
        <seg>&linux-ch8-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>커널의 설치</title>

    <para>커널 빌드는 설정, 컴파일, 설치 등 몇 단계를 거쳐야 한다. 이 책이 커널을 구성하는 다른 방법은 커널 소스 트리의 <filename>README</filename> 파일을 참고하라.</para>

    <para>다음 명령을 실행하여 컴파일을 준비한다:</para>

<screen><userinput remap="pre">make mrproper</userinput></screen>

    <para>이는 커널 트리를 완전히 깨끗하게 한다. 커널 팀은 각 커널 컴파일 전에 이 명령을 실행할 것을 권장한다. tar 아카이브를 해제한 후에 소스 트리가 깨끗할 것으로 기대해선 안 된다.</para>

    <!-- Support for compiling a keymap into the kernel is deliberately removed -->

    <para>메뉴 기반 인터페이스를 통해 커널을 구성하라. 커널 구성에 대한 일반적인 정보는 <ulink url="&hints-root;kernel-configuration.txt"/>를 참고하라. BLFS는 <ulink url="&blfs-book;longindex.html#kernel-config-index"/>에서 LFS 외부 패키지의 특정 커널 구성 요구 사항에 대한 정보를 제공한다. 커널 구성 및 빌드에 대한 추가 정보는 <ulink url="http://www.kroah.com/lkn/"/>에서 찾을 수 있다.</para>

    <note>
    
      <para><command>make defconfig</command>를 실행하여 커널 구성을 시작한다. 이렇게 하면 기본 구성이 현재 시스템 아키텍쳐를 고려하게 된다.</para>

      <para>다음 기능을 활성화/비활성화/설정하라. 그렇지 않으면 시스템이 제대로 작동하지 않거나 전혀 부팅되지 않을 수 있다:</para>

      <screen role="nodump" revision="sysv">
Device Drivers  ---&gt;
  Generic Driver Options  ---&gt;
   [ ] Support for uevent helper [CONFIG_UEVENT_HELPER]
   [*] Maintain a devtmpfs filesystem to mount at /dev [CONFIG_DEVTMPFS]

Kernel hacking  ---&gt;
       Choose kernel unwinder (Frame pointer unwinder)  ---&gt; [CONFIG_UNWINDER_FRAME_POINTER]</screen>

      <screen role="nodump" revision="systemd">
General setup -->
   [ ] Enable deprecated sysfs features to support old userspace tools [CONFIG_SYSFS_DEPRECATED]
   [*] Configure standard kernel features (expert users) [CONFIG_EXPERT] ---&gt;         
      [*] open by fhandle syscalls [CONFIG_FHANDLE]
   [ ] Auditing support [CONFIG_AUDIT]
   [*] Control Group support [CONFIG_CGROUPS]
Processor type and features  ---&gt;
   [*] Enable seccomp to safely compute untrusted bytecode [CONFIG_SECCOMP]
Firmware Drivers  ---&gt;
   [*] Export DMI identification via sysfs to userspace [CONFIG_DMIID]
Networking support  ---&gt;
  Networking options  ---&gt;
   &lt;*&gt; The IPv6 protocol [CONFIG_IPV6]
Device Drivers  ---&gt;
  Generic Driver Options  ---&gt;
   [ ] Support for uevent helper [CONFIG_UEVENT_HELPER]
   [*] Maintain a devtmpfs filesystem to mount at /dev [CONFIG_DEVTMPFS]
   Firmware Loader ---&gt;
      [ ] Enable the firmware sysfs fallback mechanism [CONFIG_FW_LOADER_USER_HELPER]
File systems  ---&gt;
   [*] Inotify support for userspace [CONFIG_INOTIFY_USER]
   &lt;*&gt; Kernel automounter support (supports v3, v4, and v5) [CONFIG_AUTOFS_FS]
  Pseudo filesystems  ---&gt;
   [*] Tmpfs POSIX Access Control Lists [CONFIG_TMPFS_POSIX_ACL]
   [*] Tmpfs extended attributes [CONFIG_TMPFS_XATTR]
Kernel hacking  ---&gt;
   x86 Debugging ---&gt;
       Choose kernel unwinder (Frame pointer unwinder)  ---&gt; [CONFIG_UNWINDER_FRAME_POINTER]</screen>
    </note>

    <note revision="systemd">
      <para>While "The IPv6 Protocol" is not strictly
      required, it is highly recommended by the systemd developers.</para>
    </note>

    <para revision="sysv">시스템 요건에 따라 몇 가지 다른 옵션이 필요할 수도 있다. BLFS 패키지에 필요한 옵션 목록은 <ulink url="&lfs-root;blfs/view/&short-version;/longindex.html#kernel-config-index">BLFS Index of Kernel Settings</ulink> (&lfs-root;blfs/view/&short-version;/longindex.html#kernel-config-index)를 참고하라.</para>

    <note>
      <para>호스트 컴퓨터가 UEFI를 사용 중이라면, 위의 'make defconfig'은 일부 EFI 관련 커널 옵션에 자동으로 추가될 것이다.</para>

      <para>호스트의 UEFI 부팅 환경 내에서 LFS 커널을 부팅하려면 커널에 다음 옵션이 선택되어 있어야 한다:</para>

<screen role="nodump">Processor type and features  ---&gt;
   [*]   EFI stub support  [CONFIG_EFI_STUB]</screen>

      <para>LFS 내에서 UEFI 환경 관리에 대한 보다 자세한 설명은 <ulink url="http://www.linuxfromscratch.org/hints/downloads/files/lfs-uefi.txt"/>의 lfs-uefi.txt에서 다룬다.
      </para>
    </note>

    <variablelist>
      <title>위 설정 항목에 대한 해석:</title>

      <varlistentry>
        <term><parameter>support for uevent helper</parameter></term>
        <listitem>
          <para>Udev/Eudev을 사용할 때 이 옵션을 설정하면 장치 관리에 방해가 될 수 있다.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>Maintain a devtmpfs</parameter></term>
        <listitem>
          <para>이렇게 하면 Udev가 실행되지 않더라도 커널에 의해 설정되는 자동화된 장치 노드가 생성된다. 그러면 Udev는 이 위에서 실행되어 권한을 관리하고 심볼릭 링크를 추가한다. 이 설정은 모든 Udev/Eudev 사용자에게 필요하다.</para>
        </listitem>
      </varlistentry>

    </variablelist>

<screen role="nodump"><userinput>make menuconfig</userinput></screen>

    <variablelist>
      <title>선택적 make 환경 변수들의 의미:</title>

      <varlistentry>
        <term><parameter>LANG=&lt;host_LANG_value&gt; LC_ALL=</parameter></term>
        <listitem>
          <para>호스트에서 사용되는 로케일을 따라 설정한다. 이는 UTF-8 리눅스 텍스트 콘솔에서 적절한 menuconfig ncurses 인터페이스 행을 출력하는 데에 필요할 수 있다.</para>

          <para>사용할 경우, 반드시 <replaceable>&lt;host_LANG_value&gt;</replaceable>를 호스트의 <envar>$LANG</envar> 변수의 값으로 대체하라. 또는 호스트의 <envar>$LC_ALL</envar>이나 <envar>$LC_CTYPE</envar> 값을 대신 사용할 수도 있다.</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>또 어떤 상황에서는 <command>make oldconfig</command>가 더 적절할 수 있다. 자세한 정보는 <filename>README</filename> 파일을 참고하라.</para>

    <para>원한다면 커널 구성 파일인 <filename>.config</filename>를 호스트 시스템(사용 가능한 것으로 가정)에서 압축 해제된 <filename class="directory">linux-&linux-version;</filename> 디렉토리로 복사하여 커널 설정을 건너 뛰어도 좋다. 그러나 이 옵션은 권장하지는 않는다. 모든 설정 메뉴를 탐색하고 처음부터 커널 구성을 만드는 것이 더 좋다.</para>

    <para>커널 이미지와 모듈들을 컴파일한다:</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>커널 모듈을 사용한다면, <filename class="directory">/etc/modprobe.d</filename>의 모듈 설정이 필요하다. 모듈 및 커널 설정에 관련된 정보는 <xref linkend="ch-config-udev"/>와 <filename class="directory">linux-&linux-version;/Documentation</filename> 디렉토리의 커널 문서에 수록되어 있다. 또 <filename>modprobe.d(5)</filename>도 유용할 것이다.</para>

    <para>커널 설정에서 모듈 지원이 비활성화되지 않았다면 다음과 같이 모듈을 설치하라:</para>

<screen><userinput remap="install">make modules_install</userinput></screen>

    <para>커널 컴파일이 완료된 후, 설치를 완료하기 위해선 추가 절차가 필요하다. 일부 파일을 <filename class="directory">/boot</filename> 디렉토리에 복사해야 한다.</para>

    <caution>
      <para>호스트 시스템에 별도의 /boot 파티션이 있다면 아래에서 복사하는 파일을 그 곳에 넣어야 한다. 가장 쉬운 방법은 호스트(chroot 외부)에서 /boot를 /mnt/lfs/boot에 바인딩하는 것이다. <emphasis>호스트 시스템</emphasis>에서 root 유저로 다음을 실행하라:</para>

<screen role="nodump"><userinput>mount --bind /boot /mnt/lfs/boot</userinput></screen>
    </caution>

    <para>커널 이미지의 경로는 사용 중인 플랫폼에 따라 달라질 수 있다. 아래 파일 이름은 취향껏 변경할 수 있지만, 파일 이름의 어간은 다음 절에서 설명할 부팅 절차의 자동 설정과 호환되도록 <emphasis>vmlinuz</emphasis>여야 한다. 다음 명령은 x86 아키텍쳐를 가정한다:</para>

<screen revision="sysv"><userinput remap="install">cp -iv arch/x86/boot/bzImage /boot/vmlinuz-&linux-version;-lfs-&version;</userinput></screen>

<screen revision="systemd"><userinput remap="install">cp -iv arch/x86/boot/bzImage /boot/vmlinuz-&linux-version;-lfs-&versiond;</userinput></screen>

    <para><filename>System.map</filename>은 커널 심볼 파일이다. 실행 중인 커널에 대한 커널 데이터 구조의 주소뿐만 아니라 커널 API에 있는 모든 함수의 진입점을 매핑한다. 커널 문제를 조사할 때 자료로 사용된다. 다음 명령을 실행하여 맵 파일을 설치하라:</para>

<screen><userinput remap="install">cp -iv System.map /boot/System.map-&linux-version;</userinput></screen>

    <para>위의 <command>make menuconfig</command> 단계에서 생성된 커널 설정 파일 <filename>.config</filename>에는 방금 컴파일된 커널에 대한 모든 설정 사항이 포함되어 있다. 나중에 참고할 수 있도록 이 파일을 보관하는 것이 좋다:</para>

<screen><userinput remap="install">cp -iv .config /boot/config-&linux-version;</userinput></screen>

    <para>리눅스 커널에 대한 문서를 설치한다:</para>

<screen><userinput remap="install">install -d /usr/share/doc/linux-&linux-version;
cp -r Documentation/* /usr/share/doc/linux-&linux-version;</userinput></screen>

    <para>커널 소스 디렉토리의 파일은 <emphasis>root</emphasis>에 의해 소유되지 않는다는 점에 주의해야 한다. 패키지가 <emphasis>root</emphasis> 유저에 의해 압축 해제될 때는(우리가 chroot 안에서 그랬듯이), 그 파일들은 패키지를 압축한 사람의 컴퓨터에 있던 사용자 및 그룹 ID를 갖는다. 이는 다른 모든 패키지들에 대해선 설치 후 소스 트리가 제거되기 때문에 문제가 되지 않지만, 리눅스 소스 트리는 보통 오랫동안 보존한다. 때문에 패키징을 한 사용자의 ID 번호가 시스템의 누군가에게 할당 될 가능성이 있다. 그러면 그 사람은 커널 소스에 대한 쓰기 권한을 갖게 된다.</para>

    <note>
      <para>대부분의 경우 나중에 BLFS에서 설치될 패키지에 맞게 커널 구성을 업데이트해야 한다. 다른 패키지와 달리 새로 빌드된 커널을 설치한 후에는 커널 소스 트리를 제거할 필요가 없다.</para>  
    
      <para>커널 소스 트리를 보존하려면 <filename class="directory">linux-&linux-version;</filename> 디렉토리에서 <command>chown -R 0:0</command>을 실행하여 모든 파일이 <emphasis>root</emphasis> 유저에 의해 소유되는지 확인하라.</para>
    </note>

    <warning>
      <para>일부 커널 문서에서는 커널 소스 디렉토리를 가리키는 <filename class="symlink">/usr/src/linux</filename>에서 심볼릭 링크를 생성할 것을 권장한다. 이는 2.6 버전 이전의 커널에 한정되며, 기본 LFS 시스템이 완성되면 구축하고자 하는 패키지에 문제를 일으킬 수 있으므로 LFS 시스템에서 생성해서는 <emphasis>안 된다</emphasis>.</para>
    </warning>

    <warning>
      <para>시스템의 <filename class="directory">include</filename> 디렉토리(<filename class="directory">/usr/include</filename>)의 헤더들은 <emphasis>항상</emphasis> Glibc가 컴파일된 헤더, 즉 <xref linkend="ch-system-linux-headers"/>에서 설치된 검증된 헤더여야 한다. 따라서 <emphasis>절대</emphasis> 원시 커널 헤더나 다른 커널 검증 헤더로 대체해서는 <emphasis>안 된다</emphasis>.</para>
    </warning>

  </sect2>

  <sect2 id="conf-modprobe" role="configuration">
    <title>리눅스 모듈 로드 순서 설정</title>

    <indexterm zone="conf-modprobe">
      <primary sortas="e-/etc/modprobe.d/usb.conf">/etc/modprobe.d/usb.conf</primary>
    </indexterm>

    <para>리눅스 모듈은 대부분 자동으로 로드되지만, 때로는 특별한 방법이 필요할 때도 있다. <command>modprobe</command>나 <command>insmod</command>와 같이 모듈을 로드하는 프로그램들은 <filename>/etc/modprobe.d/usb.conf</filename>를 이러한 목적으로 사용한다. 이 파일은 USB 드라이버 (ehci_hcd, ohci_hcd 및 uhci_hcd)가 모듈로 빌드된 경우 올바른 순서로 로드되도록 하기 위해 생성되어야 한다; ehci_hcd는 부팅 시 경고 출력을 피하기 위해 ohci_hcd와 uhci_hcd보다 먼저 로드되어야 한다.</para>

    <para>다음을 실행하여 새 <filename>/etc/modprobe.d/usb.conf</filename> 파일을 생성하라:</para>

<screen><userinput>install -v -m755 -d /etc/modprobe.d
cat &gt; /etc/modprobe.d/usb.conf &lt;&lt; "EOF"
<literal># Begin /etc/modprobe.d/usb.conf

install ohci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i ohci_hcd ; true
install uhci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i uhci_hcd ; true

# End /etc/modprobe.d/usb.conf</literal>
EOF</userinput></screen>

  </sect2>

  <sect2 id="contents-kernel" role="content">
    <title>리눅스의 내용</title>

    <segmentedlist>
      <segtitle>설치된 파일들</segtitle>
      <segtitle>설치된 디렉토리들</segtitle>

      <seglistitem>
        <seg>config-&linux-version;,
        <phrase revision="sysv">vmlinuz-&linux-version;-lfs-&version;,</phrase>
        <phrase revision="systemd">vmlinuz-&linux-version;-lfs-&versiond;,</phrase>
        System.map-&linux-version;</seg>
        <seg>/lib/modules, /usr/share/doc/linux-&linux-version;</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">요약</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="config">
        <term><filename>config-&linux-version;</filename></term>
        <listitem>
          <para>커널에 대한 모든 구성 선택 사항 포함</para>
          <indexterm zone="ch-bootable-kernel config">
            <primary sortas="e-/boot/config">/boot/config-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lfskernel">
        <term revision="sysv"><filename>vmlinuz-&linux-version;-lfs-&version;</filename></term>
        <term revision="systemd"><filename>vmlinuz-&linux-version;-lfs-&versiond;</filename></term>
        <listitem>
          <para>리눅스 시스템의 엔진. 컴퓨터를 켤 때, 로딩되는 운영 체제의 첫 번째 부분이 이 커널이다. 컴퓨터 하드웨어의 모든 요소를 감지하고 초기화한 다음, 이러한 부품들을 소프트웨어의 파일 트리로 사용할 수 있게 하며 단일 CPU로 하여금 겉보기에 동시에 여러 프로그램을 실행하는 멀티 태스킹이 가능하도록 한다.</para>
          <indexterm zone="ch-bootable-kernel lfskernel">
            <primary sortas="b-lfskernel">lfskernel-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="System.map">
        <term><filename>System.map-&linux-version;</filename></term>
        <listitem>
          <para>주소 및 심볼 목록. 커널에 있는 모든 함수와 데이터 구조의 진입점과 주소를 매핑한다.</para>
          <indexterm zone="ch-bootable-kernel System.map">
            <primary sortas="e-/boot/System.map">/boot/System.map-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>

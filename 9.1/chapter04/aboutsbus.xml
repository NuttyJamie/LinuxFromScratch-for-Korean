<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-preps-aboutsbus">
  <?dbhtml filename="aboutsbus.html"?>

  <title>SBU에 대해</title>

  <para>많은 사람들은 각 패키지를 컴파일하고 설치하는 데 대략 얼마나 걸리는지 미리 알고 싶어한다. 
Linux From Scratch는 아주 다양한 시스템에 구축될 수 있기 때문에 정확한 시간 추정치를 제공하는 것은 불가능하다. 
가장 큰 패키지(Glibc)는 가장 빠른 시스템에서는 약 20분이 걸리지만 느린 시스템에서는 최대 3일이 걸릴 수 있다! 
실제 시간을 이야기하는 대신 표준 빌드 단위(SBU)측정을 사용할 것이다.</para>

  <para>SBU는 다음과 같다. 이 책에서 처음으로 컴파일하는 패키지는 <xref linkend="chapter-temporary-tools"/>에서의
Binutils이다. 이 패키지를 컴파일하는 데 걸리는 시간이 표준 빌드 단위 또는 SBU로 언급될 단위이다. 다른 컴파일 시간은
모두 이 시간에 비례하여 표현될 것이다.</para>

  <para>예를 들어 컴파일 시간이 4.5SBU인 패키지가 있다고 하자. 이는 시스템이 Binutils를 컴파일하고 설치하는 데 
10분이 걸렸을 경우, 이 예시 패키지를 빌드하는데 <emphasis>대략</emphasis> 45분이 소요된다는 것을 의미한다. 
다행히도 대부분의 빌드 시간은 Binutils보다 적게 걸린다.</para>

  <para>일반적으로 SBU는 호스트 시스템의 GCC 버전을 포함한 많은 요인에 따라 다르기 때문에 완전히 정확한 것은 
아니다. 패키지를 설치하는 데 얼마나 걸릴지 알리기 위해 여기 적혀있지만, 
경우에 따라 그 오차는 수십 분까지 차이날 수 있다. </para>

  <note>
    <para>프로세서(또는 코어)가 여러 개인 최신 시스템의 경우, 환경 변수를 설정하거나 <command>make</command> 
프로그램에 가용한 프로세서 수를 입력해 "병렬 make"를 진행함으로써 패키지의 컴파일 시간을 줄일 수 있다. 
예를 들어 Core2Duo는 다음 명령으로 2코어를 동시에 사용할 수 있다:</para>

    <screen role="nodump"><userinput>export MAKEFLAGS='-j 2'</userinput></screen>

    <para>또는 그냥 빌드할 때:</para>

    <screen role="nodump"><userinput>make -j2</userinput></screen>

    <para>여러 개의 프로세서를 이런 식으로 사용할 경우, 책에 있는 SBU 단위는 기존보다 훨씬 더 차이날 것이다. 
경우에 따라 make 단계에서 에러가 날 수도 있다. 서로 다른 처리 작업이 교차하기 때문에 빌드 과정의 출력을 분석하기도
더 어려울 것이다. 빌드 단계에서 문제가 발생하면 단일 프로세서 빌드로 되돌아가서 오류 메시지를 정확히 분석하라.</para>
  </note>

</sect1>


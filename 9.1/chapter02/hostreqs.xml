<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-partitioning-hostreqs" xreflabel="호스트 시스템 요구사항">
  <?dbhtml filename="hostreqs.html"?>

  <title>호스트 시스템 요구사항</title>

    <para>호스트 시스템에는 버전이 다음보다 크거나 같은 소프트웨어가 있어야 한다.
대부분의 현대 리눅스 배포판에서는 문제가 되지 않는다. 또한 많은 배포판에서 소프트웨어 헤더를 종종 
    <quote>&lt;패키지-이름&gt;-devel</quote>나 <quote>&lt;패키지-이름&gt;-dev</quote> 형식으로 별도의 패키지에 표시한다. 배포판에서 그렇게 제공하는 경우 반드시 설치한다.</para>

   <para>나열된 소프트웨어 패키지 버전의 이전 버전도 작동할 수는 있지만, 테스트되지는 않았다.</para>

  <itemizedlist spacing="compact">

    <listitem>
      <para><emphasis role="strong">Bash-3.2</emphasis> (/bin/sh
      가 Bash로 심볼릭 또는 하드링크 되어야 한다)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Binutils-2.25</emphasis> (&binutils-version; 이후의 버전은 테스트되지 않았기
때문에 권장되지 않음)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Bison-2.7</emphasis> (/usr/bin/yacc가 bison이나 bison을 실행하는 작은 
스크립트에 링크되어야 함)
      </para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Bzip2-1.0.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Coreutils-6.9</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Diffutils-2.8.1</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Findutils-4.2.31</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gawk-4.0.1</emphasis> (/usr/bin/awk가 gawk에 링크되어야 함)
      </para>
    </listitem>

    <!-- glibc-2.30 requires gcc-6.2 or later -->
    <listitem>
      <para><emphasis role="strong">GCC-6.2</emphasis> C++컴파일러인 <command>g++</command>를 포함 (&gcc-version; 이후의 버전은 테스트되지 않았기 때문에 권장되지 않음)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Glibc-2.11</emphasis> (&glibc-version; 이후의 버전은 테스트되지 않았기 때문에
권장되지 않음)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Grep-2.5.1a</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gzip-1.3.12</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Linux Kernel-&min-kernel;</emphasis></para>

      <para>이 커널 버전이 필요한 이유는 개발자의 권장 사항에 따라 6장에서 <application>glibc</application>를 빌드할 때 그 
버전을 지정하기 때문이다. 또 udev에도 필요하다.</para>

      <para>호스트 커널이 &min-kernel; 이전인 경우 커널을 보다 높은 버전으로 교체해야 한다. 이것을 할 수 있는 방법은 
두 가지가 있다. 먼저 리눅스 벤더가 &min-kernel; 이상의 커널 패키지를 제공하는지 확인하라. 만약 그렇다면, 그걸 설치
하라. 벤더가 수용 가능한 커널 패키지를 제공하지 않거나 당신이 설치하고 싶지 않으면 직접 커널을 컴파일할 수도 있다.
커널을 컴파일 하고 부팅 로더를 구성하는 방법(호스트에서 GRUB를 사용하는 것으로 간주)은 <xref linkend="chapter-bootable"/>에 수록되어 있다.</para>

    </listitem>

    <listitem>
      <para><emphasis role="strong">M4-1.4.10</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Make-4.0</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Patch-2.5.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Perl-5.8.8</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Python-3.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Sed-4.1.5</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Tar-1.22</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Texinfo-4.7</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Xz-5.0.0</emphasis></para>
    </listitem>

  </itemizedlist>

  <important>
    <para>위에 언급된 심볼링크는 이 책에 포함된 지침을 따라 LFS 시스템을 구축하기 위해 필요하다. dash나 mawk같은 
다른 소프트웨어를 가리키는 Symlink도 작동하겠지만 LFS 개발팀에서 테스트하거나 다뤄지지는 않았으며, 
책의 지침을 벗어나야 하거나 일부 패키지에 추가 패치가 필요할 수 있다.</para>
  </important>

  <!-- Use an empty sect2 element to prevent a pdf warning.  -->
  <bridgehead renderas="sect2" 
              id="version-check" 
              xreflabel="Host System Requirements">
  </bridgehead>
  <!--<title> </title>-->

  <para >호스트 시스템에 적절한 버전이 모두 있는지, 프로그램을 컴파일할 수 있는지 확인하려면 다음을 실행하라.:</para>

<!-- ANY additional lines in the script cause a pdf rendering problem-->
<screen role="nodump"><userinput>cat &gt; version-check.sh &lt;&lt; "EOF"
<literal>#!/bin/bash
# Simple script to list version numbers of critical development tools
export LC_ALL=C
bash --version | head -n1 | cut -d" " -f2-4
MYSH=$(readlink -f /bin/sh)
echo "/bin/sh -&gt; $MYSH"
echo $MYSH | grep -q bash || echo "ERROR: /bin/sh does not point to bash"
unset MYSH

echo -n "Binutils: "; ld --version | head -n1 | cut -d" " -f3-
bison --version | head -n1

if [ -h /usr/bin/yacc ]; then
  echo "/usr/bin/yacc -> `readlink -f /usr/bin/yacc`";
elif [ -x /usr/bin/yacc ]; then
  echo yacc is `/usr/bin/yacc --version | head -n1`
else
  echo "yacc not found" 
fi

bzip2 --version 2&gt;&amp;1 &lt; /dev/null | head -n1 | cut -d" " -f1,6-
echo -n "Coreutils: "; chown --version | head -n1 | cut -d")" -f2
diff --version | head -n1
find --version | head -n1
gawk --version | head -n1

if [ -h /usr/bin/awk ]; then
  echo "/usr/bin/awk -&gt; `readlink -f /usr/bin/awk`";
elif [ -x /usr/bin/awk ]; then
  echo awk is `/usr/bin/awk --version | head -n1`
else 
  echo "awk not found" 
fi

gcc --version | head -n1
g++ --version | head -n1
ldd --version | head -n1 | cut -d" " -f2-  # glibc version
grep --version | head -n1
gzip --version | head -n1
cat /proc/version
m4 --version | head -n1
make --version | head -n1
patch --version | head -n1
echo Perl `perl -V:version`
python3 --version
sed --version | head -n1
tar --version | head -n1
makeinfo --version | head -n1  # texinfo version
xz --version | head -n1
<?hard-pagebreak?>
echo 'int main(){}' &gt; dummy.c &amp;&amp; g++ -o dummy dummy.c
if [ -x dummy ]
  then echo "g++ compilation OK";
  else echo "g++ compilation failed"; fi
rm -f dummy.c dummy</literal>
EOF

bash version-check.sh</userinput></screen>
<!--
  <para>Also check for some library consistency:</para>

<screen role="nodump"><userinput>cat &gt; library-check.sh &lt;&lt; "EOF"
<literal>#!/bin/bash
for lib in lib{gmp,mpfr,mpc}.la; do
  echo $lib: $(if find /usr/lib* -name $lib|
               grep -q $lib;then :;else echo not;fi) found
done
unset lib</literal>
EOF

bash library-check.sh</userinput></screen>

<para>The files identified by this script should be all present
or all absent, but not only one or two present.</para>
-->

</sect1>
